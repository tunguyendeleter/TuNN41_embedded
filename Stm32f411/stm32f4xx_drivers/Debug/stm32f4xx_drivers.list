
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001284  08001284  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001284  08001284  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001284  08001284  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001284  08001284  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800128c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000018  080012a4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080012a4  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b81  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000781  00000000  00000000  00021bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00022350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  000224e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c44  00000000  00000000  00022618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002356  00000000  00000000  0002425c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009847  00000000  00000000  000265b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002fdf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004a8  00000000  00000000  0002fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800126c 	.word	0x0800126c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800126c 	.word	0x0800126c

080001d8 <GPIO_PeriClockControl>:
#include "gpio2.h"


void GPIO_PeriClockControl(GPIO_Type *pGPIOx, uint8 EnorDis)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d141      	bne.n	800026e <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a45      	ldr	r2, [pc, #276]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockControl+0x28>
			PORTA_CLK_EN();
 80001f2:	4b45      	ldr	r3, [pc, #276]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a44      	ldr	r2, [pc, #272]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOE)
			PORTE_CLK_DIS();
		else if(pGPIOx == GPIOH)
			PORTH_CLK_DIS();
	}
}
 80001fe:	e07a      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOB)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a42      	ldr	r2, [pc, #264]	; (800030c <GPIO_PeriClockControl+0x134>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockControl+0x3e>
			PORTB_CLK_EN();
 8000208:	4b3f      	ldr	r3, [pc, #252]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a3e      	ldr	r2, [pc, #248]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e06f      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOC)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a3d      	ldr	r2, [pc, #244]	; (8000310 <GPIO_PeriClockControl+0x138>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x54>
			PORTC_CLK_EN();
 800021e:	4b3a      	ldr	r3, [pc, #232]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a39      	ldr	r2, [pc, #228]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e064      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOD)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a39      	ldr	r2, [pc, #228]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x6a>
			PORTD_CLK_EN();
 8000234:	4b34      	ldr	r3, [pc, #208]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a33      	ldr	r2, [pc, #204]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e059      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOE)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a34      	ldr	r2, [pc, #208]	; (8000318 <GPIO_PeriClockControl+0x140>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x80>
			PORTE_CLK_EN();
 800024a:	4b2f      	ldr	r3, [pc, #188]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a2e      	ldr	r2, [pc, #184]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e04e      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOH)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <GPIO_PeriClockControl+0x144>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d14a      	bne.n	80002f6 <GPIO_PeriClockControl+0x11e>
			PORTH_CLK_EN();
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a28      	ldr	r2, [pc, #160]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e043      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
	}else if(EnorDis == DISABLE)
 800026e:	78fb      	ldrb	r3, [r7, #3]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d140      	bne.n	80002f6 <GPIO_PeriClockControl+0x11e>
		if(pGPIOx == GPIOA)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <GPIO_PeriClockControl+0x12c>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_PeriClockControl+0xb2>
			PORTA_CLK_DIS();
 800027c:	4b22      	ldr	r3, [pc, #136]	; (8000308 <GPIO_PeriClockControl+0x130>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a21      	ldr	r2, [pc, #132]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000288:	e035      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOB)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a1f      	ldr	r2, [pc, #124]	; (800030c <GPIO_PeriClockControl+0x134>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_PeriClockControl+0xc8>
			PORTB_CLK_DIS();
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <GPIO_PeriClockControl+0x130>)
 8000298:	f023 0302 	bic.w	r3, r3, #2
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029e:	e02a      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOC)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a1b      	ldr	r2, [pc, #108]	; (8000310 <GPIO_PeriClockControl+0x138>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_PeriClockControl+0xde>
			PORTC_CLK_DIS();
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002ae:	f023 0304 	bic.w	r3, r3, #4
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b4:	e01f      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOD)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <GPIO_PeriClockControl+0x13c>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClockControl+0xf4>
			PORTD_CLK_DIS();
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a11      	ldr	r2, [pc, #68]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002c4:	f023 0308 	bic.w	r3, r3, #8
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ca:	e014      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOE)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <GPIO_PeriClockControl+0x140>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClockControl+0x10a>
			PORTE_CLK_DIS();
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002da:	f023 0310 	bic.w	r3, r3, #16
 80002de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e0:	e009      	b.n	80002f6 <GPIO_PeriClockControl+0x11e>
		else if(pGPIOx == GPIOH)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <GPIO_PeriClockControl+0x144>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d105      	bne.n	80002f6 <GPIO_PeriClockControl+0x11e>
			PORTH_CLK_DIS();
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ee:	4a06      	ldr	r2, [pc, #24]	; (8000308 <GPIO_PeriClockControl+0x130>)
 80002f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020000 	.word	0x40020000
 8000308:	40023800 	.word	0x40023800
 800030c:	40020400 	.word	0x40020400
 8000310:	40020800 	.word	0x40020800
 8000314:	40020c00 	.word	0x40020c00
 8000318:	40021000 	.word	0x40021000
 800031c:	40021c00 	.word	0x40021c00

08000320 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	uint32 temp = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
	/*1. Configure the mode of gpio pin*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	795b      	ldrb	r3, [r3, #5]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d822      	bhi.n	800037a <GPIO_Init+0x5a>
	{ /*non interrupt mode*/
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	461a      	mov	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	fa02 f303 	lsl.w	r3, r2, r3
 8000344:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		/*clearing bitfields*/
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	791b      	ldrb	r3, [r3, #4]
 8000350:	005b      	lsls	r3, r3, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4619      	mov	r1, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	400a      	ands	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		/*setting bitfields*/
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	697a      	ldr	r2, [r7, #20]
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	e0a1      	b.n	80004be <GPIO_Init+0x19e>
	}
	else
	{ /*interrupt mode*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	795b      	ldrb	r3, [r3, #5]
 800037e:	2b04      	cmp	r3, #4
 8000380:	d117      	bne.n	80003b2 <GPIO_Init+0x92>
		{
			/*1. Configure falling edge selection*/
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000382:	4b9f      	ldr	r3, [pc, #636]	; (8000600 <GPIO_Init+0x2e0>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7912      	ldrb	r2, [r2, #4]
 800038a:	4611      	mov	r1, r2
 800038c:	2201      	movs	r2, #1
 800038e:	408a      	lsls	r2, r1
 8000390:	4611      	mov	r1, r2
 8000392:	4a9b      	ldr	r2, [pc, #620]	; (8000600 <GPIO_Init+0x2e0>)
 8000394:	430b      	orrs	r3, r1
 8000396:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000398:	4b99      	ldr	r3, [pc, #612]	; (8000600 <GPIO_Init+0x2e0>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	7912      	ldrb	r2, [r2, #4]
 80003a0:	4611      	mov	r1, r2
 80003a2:	2201      	movs	r2, #1
 80003a4:	408a      	lsls	r2, r1
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a95      	ldr	r2, [pc, #596]	; (8000600 <GPIO_Init+0x2e0>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6093      	str	r3, [r2, #8]
 80003b0:	e035      	b.n	800041e <GPIO_Init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	2b05      	cmp	r3, #5
 80003b8:	d117      	bne.n	80003ea <GPIO_Init+0xca>
		{
			/*1. Configure rising edge selection*/
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ba:	4b91      	ldr	r3, [pc, #580]	; (8000600 <GPIO_Init+0x2e0>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7912      	ldrb	r2, [r2, #4]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a8c      	ldr	r2, [pc, #560]	; (8000600 <GPIO_Init+0x2e0>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d2:	4b8b      	ldr	r3, [pc, #556]	; (8000600 <GPIO_Init+0x2e0>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a87      	ldr	r2, [pc, #540]	; (8000600 <GPIO_Init+0x2e0>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6093      	str	r3, [r2, #8]
 80003e8:	e019      	b.n	800041e <GPIO_Init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_EE)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	795b      	ldrb	r3, [r3, #5]
 80003ee:	2b06      	cmp	r3, #6
 80003f0:	d115      	bne.n	800041e <GPIO_Init+0xfe>
		{
			/*1. Configure either edge selection*/
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	4b83      	ldr	r3, [pc, #524]	; (8000600 <GPIO_Init+0x2e0>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a7f      	ldr	r2, [pc, #508]	; (8000600 <GPIO_Init+0x2e0>)
 8000404:	430b      	orrs	r3, r1
 8000406:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000408:	4b7d      	ldr	r3, [pc, #500]	; (8000600 <GPIO_Init+0x2e0>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	7912      	ldrb	r2, [r2, #4]
 8000410:	4611      	mov	r1, r2
 8000412:	2201      	movs	r2, #1
 8000414:	408a      	lsls	r2, r1
 8000416:	4611      	mov	r1, r2
 8000418:	4a79      	ldr	r2, [pc, #484]	; (8000600 <GPIO_Init+0x2e0>)
 800041a:	430b      	orrs	r3, r1
 800041c:	6093      	str	r3, [r2, #8]
		}

		/*2. Configure the GPIO port selection in SYSCFG_EXTICR*/
		uint8 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	089b      	lsrs	r3, r3, #2
 8000424:	74fb      	strb	r3, [r7, #19]
		uint8 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	f003 0303 	and.w	r3, r3, #3
 800042e:	74bb      	strb	r3, [r7, #18]
		uint8 portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a73      	ldr	r2, [pc, #460]	; (8000604 <GPIO_Init+0x2e4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d024      	beq.n	8000484 <GPIO_Init+0x164>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a72      	ldr	r2, [pc, #456]	; (8000608 <GPIO_Init+0x2e8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d01d      	beq.n	8000480 <GPIO_Init+0x160>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a70      	ldr	r2, [pc, #448]	; (800060c <GPIO_Init+0x2ec>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d016      	beq.n	800047c <GPIO_Init+0x15c>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6f      	ldr	r2, [pc, #444]	; (8000610 <GPIO_Init+0x2f0>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d00f      	beq.n	8000478 <GPIO_Init+0x158>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a6d      	ldr	r2, [pc, #436]	; (8000614 <GPIO_Init+0x2f4>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d008      	beq.n	8000474 <GPIO_Init+0x154>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a6c      	ldr	r2, [pc, #432]	; (8000618 <GPIO_Init+0x2f8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d101      	bne.n	8000470 <GPIO_Init+0x150>
 800046c:	2305      	movs	r3, #5
 800046e:	e00a      	b.n	8000486 <GPIO_Init+0x166>
 8000470:	2300      	movs	r3, #0
 8000472:	e008      	b.n	8000486 <GPIO_Init+0x166>
 8000474:	2304      	movs	r3, #4
 8000476:	e006      	b.n	8000486 <GPIO_Init+0x166>
 8000478:	2303      	movs	r3, #3
 800047a:	e004      	b.n	8000486 <GPIO_Init+0x166>
 800047c:	2302      	movs	r3, #2
 800047e:	e002      	b.n	8000486 <GPIO_Init+0x166>
 8000480:	2301      	movs	r3, #1
 8000482:	e000      	b.n	8000486 <GPIO_Init+0x166>
 8000484:	2300      	movs	r3, #0
 8000486:	747b      	strb	r3, [r7, #17]
		SYSCFG_CLK_EN();
 8000488:	4b64      	ldr	r3, [pc, #400]	; (800061c <GPIO_Init+0x2fc>)
 800048a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800048c:	4a63      	ldr	r2, [pc, #396]	; (800061c <GPIO_Init+0x2fc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000494:	7c7a      	ldrb	r2, [r7, #17]
 8000496:	7cbb      	ldrb	r3, [r7, #18]
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	fa02 f103 	lsl.w	r1, r2, r3
 800049e:	4a60      	ldr	r2, [pc, #384]	; (8000620 <GPIO_Init+0x300>)
 80004a0:	7cfb      	ldrb	r3, [r7, #19]
 80004a2:	3302      	adds	r3, #2
 80004a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI interrupt delivery using IMR*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b55      	ldr	r3, [pc, #340]	; (8000600 <GPIO_Init+0x2e0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a51      	ldr	r2, [pc, #324]	; (8000600 <GPIO_Init+0x2e0>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
	}
	/*2. Configure the speed*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	799b      	ldrb	r3, [r3, #6]
 80004c2:	461a      	mov	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		/*clearing bitfields*/
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	2103      	movs	r1, #3
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	43db      	mvns	r3, r3
 80004e4:	4619      	mov	r1, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	400a      	ands	r2, r1
 80004ec:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;		/*setting bitfields*/
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6899      	ldr	r1, [r3, #8]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	430a      	orrs	r2, r1
 80004fc:	609a      	str	r2, [r3, #8]
	temp = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]

	/*3. Configure the pupd setting*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	79db      	ldrb	r3, [r3, #7]
 8000506:	461a      	mov	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			/*clearing bitfields*/
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	68da      	ldr	r2, [r3, #12]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;			/*setting bitfields*/
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68d9      	ldr	r1, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	430a      	orrs	r2, r1
 8000540:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

	/*4. Configure the optype*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7a1b      	ldrb	r3, [r3, #8]
 800054a:	461a      	mov	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));				/*clearing bitfields*/
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	2301      	movs	r3, #1
 8000564:	408b      	lsls	r3, r1
 8000566:	43db      	mvns	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;		/*setting bitfields*/
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6859      	ldr	r1, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	430a      	orrs	r2, r1
 8000580:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]

	/*5. Configure the alt function*/
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d131      	bne.n	80005f2 <GPIO_Init+0x2d2>
	{
		uint8 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	743b      	strb	r3, [r7, #16]
		uint8 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	08db      	lsrs	r3, r3, #3
 800059e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp2] &= ~(0x0F << (4 * temp1));
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	3208      	adds	r2, #8
 80005a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ac:	7c3b      	ldrb	r3, [r7, #16]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	220f      	movs	r2, #15
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	4001      	ands	r1, r0
 80005c2:	3208      	adds	r2, #8
 80005c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp2] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp1));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7bfa      	ldrb	r2, [r7, #15]
 80005ce:	3208      	adds	r2, #8
 80005d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7a5b      	ldrb	r3, [r3, #9]
 80005d8:	461a      	mov	r2, r3
 80005da:	7c3b      	ldrb	r3, [r7, #16]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	7bfa      	ldrb	r2, [r7, #15]
 80005ea:	4301      	orrs	r1, r0
 80005ec:	3208      	adds	r2, #8
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40013c00 	.word	0x40013c00
 8000604:	40020000 	.word	0x40020000
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40021000 	.word	0x40021000
 8000618:	40021c00 	.word	0x40021c00
 800061c:	40023800 	.word	0x40023800
 8000620:	40013800 	.word	0x40013800

08000624 <NVIC_IRQConfig>:
#include "nvic.h"


void NVIC_IRQConfig(uint8 IRQNumber, uint8 IRQPriority, uint8 EnorDis)
{
 8000624:	b490      	push	{r4, r7}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	4613      	mov	r3, r2
 8000634:	717b      	strb	r3, [r7, #5]
	if(EnorDis == ENABLE)
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d12d      	bne.n	8000698 <NVIC_IRQConfig+0x74>
	{
		/*setup ISER register*/
		NVIC->ICPR[IRQNumber/32] |= (1 << (IRQNumber % 32));
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <NVIC_IRQConfig+0xac>)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	095b      	lsrs	r3, r3, #5
 8000642:	b2d8      	uxtb	r0, r3
 8000644:	4603      	mov	r3, r0
 8000646:	3360      	adds	r3, #96	; 0x60
 8000648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	f002 021f 	and.w	r2, r2, #31
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	491d      	ldr	r1, [pc, #116]	; (80006d0 <NVIC_IRQConfig+0xac>)
 800065a:	431a      	orrs	r2, r3
 800065c:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8000660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		NVIC->ISER[IRQNumber/32] |= (1 << (IRQNumber % 32));
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <NVIC_IRQConfig+0xac>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	4603      	mov	r3, r0
 800066e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	f002 021f 	and.w	r2, r2, #31
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4614      	mov	r4, r2
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <NVIC_IRQConfig+0xac>)
 8000682:	4601      	mov	r1, r0
 8000684:	4323      	orrs	r3, r4
 8000686:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		/*setup IP register*/
		NVIC->IP[IRQNumber] = (IRQPriority);
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <NVIC_IRQConfig+0xac>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4413      	add	r3, r2
 8000690:	79ba      	ldrb	r2, [r7, #6]
 8000692:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	{
		/*setup ICER register*/
		NVIC->ICER[IRQNumber/32] |= (1 << (IRQNumber % 32));
	}

}
 8000696:	e016      	b.n	80006c6 <NVIC_IRQConfig+0xa2>
	else if(EnorDis == DISABLE)
 8000698:	797b      	ldrb	r3, [r7, #5]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d113      	bne.n	80006c6 <NVIC_IRQConfig+0xa2>
		NVIC->ICER[IRQNumber/32] |= (1 << (IRQNumber % 32));
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <NVIC_IRQConfig+0xac>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	095b      	lsrs	r3, r3, #5
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	3320      	adds	r3, #32
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	f002 021f 	and.w	r2, r2, #31
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4905      	ldr	r1, [pc, #20]	; (80006d0 <NVIC_IRQConfig+0xac>)
 80006bc:	431a      	orrs	r2, r3
 80006be:	f100 0320 	add.w	r3, r0, #32
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc90      	pop	{r4, r7}
 80006ce:	4770      	bx	lr
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <RCC_GetPLLValue>:

static uint16 AHB_prescaler[9] = {2, 4, 8, 16, 32, 64, 128, 256, 512};
static uint8 APB_prescaler[4] = {2, 4, 8, 16};

uint32 RCC_GetPLLValue(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
    return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <RCC_GetPCLK1Value>:

uint32 RCC_GetPCLK1Value(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
    uint8 tempsws, tempAHB, tempAPB1;
    uint16 tempAHBPre, tempAPB1Pre;
    uint32 tempclk;

    tempsws = (RCC->CFGR >> 2) & 0X3;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <RCC_GetPCLK1Value+0xa8>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	71fb      	strb	r3, [r7, #7]
    if (tempsws == 0)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <RCC_GetPCLK1Value+0x20>
    {
        tempclk = 16000000;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <RCC_GetPCLK1Value+0xac>)
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e00b      	b.n	800071c <RCC_GetPCLK1Value+0x38>
    }
    else if (tempsws == 1)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d102      	bne.n	8000710 <RCC_GetPCLK1Value+0x2c>
    {
        tempclk = 8000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <RCC_GetPCLK1Value+0xb0>)
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	e005      	b.n	800071c <RCC_GetPCLK1Value+0x38>
    }
    else if (tempsws == 2)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d102      	bne.n	800071c <RCC_GetPCLK1Value+0x38>
    {
        tempclk = RCC_GetPLLValue();
 8000716:	f7ff ffdd 	bl	80006d4 <RCC_GetPLLValue>
 800071a:	60b8      	str	r0, [r7, #8]
    }

    tempAHB = (RCC->CFGR >> 4) & 0XF;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <RCC_GetPCLK1Value+0xa8>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	71bb      	strb	r3, [r7, #6]
    if (tempAHB < 8)
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d802      	bhi.n	8000736 <RCC_GetPCLK1Value+0x52>
    {
        tempAHBPre = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	81fb      	strh	r3, [r7, #14]
 8000734:	e008      	b.n	8000748 <RCC_GetPCLK1Value+0x64>
    }
    else if (tempAHB >= 8)
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d905      	bls.n	8000748 <RCC_GetPCLK1Value+0x64>
    {
        tempAHBPre = AHB_prescaler[tempAHB - 8];
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3b08      	subs	r3, #8
 8000740:	4a15      	ldr	r2, [pc, #84]	; (8000798 <RCC_GetPCLK1Value+0xb4>)
 8000742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000746:	81fb      	strh	r3, [r7, #14]
    }

    tempAPB1 = (RCC->CFGR >> 10) & 0X7;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <RCC_GetPCLK1Value+0xa8>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	0a9b      	lsrs	r3, r3, #10
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0307 	and.w	r3, r3, #7
 8000754:	717b      	strb	r3, [r7, #5]
    if (tempAPB1 < 4)
 8000756:	797b      	ldrb	r3, [r7, #5]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d802      	bhi.n	8000762 <RCC_GetPCLK1Value+0x7e>
    {
        tempAPB1Pre = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	81bb      	strh	r3, [r7, #12]
 8000760:	e007      	b.n	8000772 <RCC_GetPCLK1Value+0x8e>
    }
    else if (tempAPB1 >= 4)
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d904      	bls.n	8000772 <RCC_GetPCLK1Value+0x8e>
    {
        tempAPB1Pre = APB_prescaler[tempAPB1 - 4];
 8000768:	797b      	ldrb	r3, [r7, #5]
 800076a:	3b04      	subs	r3, #4
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <RCC_GetPCLK1Value+0xb8>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	81bb      	strh	r3, [r7, #12]
    }

    tempclk = (tempclk / tempAHBPre) / tempAPB1Pre;
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	fbb2 f2f3 	udiv	r2, r2, r3
 800077a:	89bb      	ldrh	r3, [r7, #12]
 800077c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000780:	60bb      	str	r3, [r7, #8]
    return tempclk;
 8000782:	68bb      	ldr	r3, [r7, #8]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	00f42400 	.word	0x00f42400
 8000794:	007a1200 	.word	0x007a1200
 8000798:	20000000 	.word	0x20000000
 800079c:	20000014 	.word	0x20000014

080007a0 <RCC_GetPCLK2Value>:

uint32 RCC_GetPCLK2Value(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
    uint8 tempsws, tempAHB, tempAPB2;
    uint16 tempAHBPre, tempAPB2Pre;
    uint32 tempclk;

    tempsws = (RCC->CFGR >> 2) & 0X3;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <RCC_GetPCLK2Value+0xa8>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0303 	and.w	r3, r3, #3
 80007b2:	71fb      	strb	r3, [r7, #7]
    if (tempsws == 0)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <RCC_GetPCLK2Value+0x20>
    {
        tempclk = 16000000;
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <RCC_GetPCLK2Value+0xac>)
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	e00b      	b.n	80007d8 <RCC_GetPCLK2Value+0x38>
    }
    else if (tempsws == 1)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d102      	bne.n	80007cc <RCC_GetPCLK2Value+0x2c>
    {
        tempclk = 8000000;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <RCC_GetPCLK2Value+0xb0>)
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e005      	b.n	80007d8 <RCC_GetPCLK2Value+0x38>
    }
    else if (tempsws == 2)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d102      	bne.n	80007d8 <RCC_GetPCLK2Value+0x38>
    {
        tempclk = RCC_GetPLLValue();
 80007d2:	f7ff ff7f 	bl	80006d4 <RCC_GetPLLValue>
 80007d6:	60b8      	str	r0, [r7, #8]
    }

    tempAHB = (RCC->CFGR >> 4) & 0XF;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <RCC_GetPCLK2Value+0xa8>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	71bb      	strb	r3, [r7, #6]
    if (tempAHB < 8)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d802      	bhi.n	80007f2 <RCC_GetPCLK2Value+0x52>
    {
        tempAHBPre = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	81fb      	strh	r3, [r7, #14]
 80007f0:	e008      	b.n	8000804 <RCC_GetPCLK2Value+0x64>
    }
    else if (tempAHB >= 8)
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d905      	bls.n	8000804 <RCC_GetPCLK2Value+0x64>
    {
        tempAHBPre = AHB_prescaler[tempAHB - 8];
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	3b08      	subs	r3, #8
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <RCC_GetPCLK2Value+0xb4>)
 80007fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000802:	81fb      	strh	r3, [r7, #14]
    }

    tempAPB2 = (RCC->CFGR >> 13) & 0X7;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <RCC_GetPCLK2Value+0xa8>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0307 	and.w	r3, r3, #7
 8000810:	717b      	strb	r3, [r7, #5]
    if (tempAPB2 < 4)
 8000812:	797b      	ldrb	r3, [r7, #5]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d802      	bhi.n	800081e <RCC_GetPCLK2Value+0x7e>
    {
        tempAPB2Pre = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	81bb      	strh	r3, [r7, #12]
 800081c:	e007      	b.n	800082e <RCC_GetPCLK2Value+0x8e>
    }
    else if (tempAPB2 >= 4)
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d904      	bls.n	800082e <RCC_GetPCLK2Value+0x8e>
    {
        tempAPB2Pre = APB_prescaler[tempAPB2 - 4];
 8000824:	797b      	ldrb	r3, [r7, #5]
 8000826:	3b04      	subs	r3, #4
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <RCC_GetPCLK2Value+0xb8>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	81bb      	strh	r3, [r7, #12]
    }

    tempclk = (tempclk / tempAHBPre) / tempAPB2Pre;
 800082e:	89fb      	ldrh	r3, [r7, #14]
 8000830:	68ba      	ldr	r2, [r7, #8]
 8000832:	fbb2 f2f3 	udiv	r2, r2, r3
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	fbb2 f3f3 	udiv	r3, r2, r3
 800083c:	60bb      	str	r3, [r7, #8]
    return tempclk;
 800083e:	68bb      	ldr	r3, [r7, #8]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	00f42400 	.word	0x00f42400
 8000850:	007a1200 	.word	0x007a1200
 8000854:	20000000 	.word	0x20000000
 8000858:	20000014 	.word	0x20000014

0800085c <SysTick_Init>:
 *   @note       Driver should be called in main function.
 *
 */

void SysTick_Init(uint32 CountValue)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    /* Disable timer to configure timer*/
    SysTick->CSR &= ~(1 << 0);
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <SysTick_Init+0x50>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <SysTick_Init+0x50>)
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]

    /* Configure clock source from processor */
    SysTick->CSR |= (1 << 2);
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <SysTick_Init+0x50>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <SysTick_Init+0x50>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6013      	str	r3, [r2, #0]

    /* Enable interrupt request to  systick timer */
    SysTick->CSR |= (1 << 1);
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <SysTick_Init+0x50>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SysTick_Init+0x50>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	6013      	str	r3, [r2, #0]

    /* Reload value */
    SysTick->RVR = CountValue;
 8000888:	4a08      	ldr	r2, [pc, #32]	; (80008ac <SysTick_Init+0x50>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6053      	str	r3, [r2, #4]

    /* Clear current value */
    SysTick->CVR = 1;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <SysTick_Init+0x50>)
 8000890:	2201      	movs	r2, #1
 8000892:	609a      	str	r2, [r3, #8]

    /* Enable timer to configure timer*/
    SysTick->CSR |= (1 << 0);
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Init+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <SysTick_Init+0x50>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <SysTick_StartTimer>:
 *
 *   @note       Driver should be called in main function.
 *
 */
void SysTick_StartTimer(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
    /* Enable timer to configure timer*/
    SysTick->CSR |= (1 << 0);
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_StartTimer+0x1c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <SysTick_StartTimer+0x1c>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <USART_PeriClockControl>:

/******************************************************************************
 *  GLOBAL FUNCTION
 *****************************************************************************/
void USART_PeriClockControl(USART_Type *pUSARTx, uint8 EnorDis)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
    if (EnorDis == ENABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d120      	bne.n	8000924 <USART_PeriClockControl+0x54>
    {
        if (pUSARTx == USART1)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a24      	ldr	r2, [pc, #144]	; (8000978 <USART_PeriClockControl+0xa8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <USART_PeriClockControl+0x28>
            USART1_CLK_EN();
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <USART_PeriClockControl+0xac>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <USART_PeriClockControl+0xac>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
        else if (pUSARTx == USART2)
            USART2_CLK_DIS();
        else if (pUSARTx == USART6)
            USART6_CLK_DIS();
    }
}
 80008f6:	e038      	b.n	800096a <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <USART_PeriClockControl+0xb0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d106      	bne.n	800090e <USART_PeriClockControl+0x3e>
            USART2_CLK_EN();
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <USART_PeriClockControl+0xac>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <USART_PeriClockControl+0xac>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800090c:	e02d      	b.n	800096a <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART6)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <USART_PeriClockControl+0xb4>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d129      	bne.n	800096a <USART_PeriClockControl+0x9a>
            USART6_CLK_EN();
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <USART_PeriClockControl+0xac>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <USART_PeriClockControl+0xac>)
 800091c:	f043 0320 	orr.w	r3, r3, #32
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000922:	e022      	b.n	800096a <USART_PeriClockControl+0x9a>
    else if (EnorDis == DISABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d11f      	bne.n	800096a <USART_PeriClockControl+0x9a>
        if (pUSARTx == USART1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <USART_PeriClockControl+0xa8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <USART_PeriClockControl+0x70>
            USART1_CLK_DIS();
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <USART_PeriClockControl+0xac>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <USART_PeriClockControl+0xac>)
 8000938:	f023 0310 	bic.w	r3, r3, #16
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800093e:	e014      	b.n	800096a <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <USART_PeriClockControl+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <USART_PeriClockControl+0x86>
            USART2_CLK_DIS();
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <USART_PeriClockControl+0xac>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <USART_PeriClockControl+0xac>)
 800094e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000954:	e009      	b.n	800096a <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART6)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <USART_PeriClockControl+0xb4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d105      	bne.n	800096a <USART_PeriClockControl+0x9a>
            USART6_CLK_DIS();
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <USART_PeriClockControl+0xac>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a06      	ldr	r2, [pc, #24]	; (800097c <USART_PeriClockControl+0xac>)
 8000964:	f023 0320 	bic.w	r3, r3, #32
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40011000 	.word	0x40011000
 800097c:	40023800 	.word	0x40023800
 8000980:	40004400 	.word	0x40004400
 8000984:	40011400 	.word	0x40011400

08000988 <USART_Init>:

void USART_Init(USART_Handle_Type *pUSARTHandle)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    // Temporary variable
    uint32 tempreg = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]

    /******************************** Configuration of CR1******************************************/

    // Implement the code to enable the Clock for given USART peripheral
    if (pUSARTHandle->pUSARTx == USART1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a51      	ldr	r2, [pc, #324]	; (8000ae0 <USART_Init+0x158>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <USART_Init+0x24>
    {
        USART1_CLK_EN();
 800099e:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <USART_Init+0x15c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a50      	ldr	r2, [pc, #320]	; (8000ae4 <USART_Init+0x15c>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	e016      	b.n	80009da <USART_Init+0x52>
    }
    else if (pUSARTHandle->pUSARTx == USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <USART_Init+0x160>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <USART_Init+0x3c>
    {
        USART2_CLK_EN();
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <USART_Init+0x15c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <USART_Init+0x15c>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	e00a      	b.n	80009da <USART_Init+0x52>
    }
    else if (pUSARTHandle->pUSARTx == USART6)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a48      	ldr	r2, [pc, #288]	; (8000aec <USART_Init+0x164>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d105      	bne.n	80009da <USART_Init+0x52>
    {
        USART6_CLK_EN();
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <USART_Init+0x15c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <USART_Init+0x15c>)
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
    }

    // Enable USART Tx and Rx engines according to the USART_Mode configuration item
    if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	791b      	ldrb	r3, [r3, #4]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d104      	bne.n	80009ec <USART_Init+0x64>
    {
        // Implement the code to enable the Receiver bit field
        tempreg |= (1 << USART_CR1_RE_SHIFT);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e010      	b.n	8000a0e <USART_Init+0x86>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <USART_Init+0x76>
    {
        // Implement the code to enable the Transmitter bit field
        tempreg |= (1 << USART_CR1_TE_SHIFT);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e007      	b.n	8000a0e <USART_Init+0x86>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d103      	bne.n	8000a0e <USART_Init+0x86>
    {
        // Implement the code to enable the both Transmitter and Receiver bit fields
        tempreg |= ((1 << USART_CR1_TE_SHIFT) | (1 << USART_CR1_RE_SHIFT));
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f043 030c 	orr.w	r3, r3, #12
 8000a0c:	60fb      	str	r3, [r7, #12]
    }

    // Implement the code to configure the Word length configuration item
    tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M_SHIFT;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7b5b      	ldrb	r3, [r3, #13]
 8000a12:	031b      	lsls	r3, r3, #12
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    // Configuration of parity control bit fields
    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7b9b      	ldrb	r3, [r3, #14]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d108      	bne.n	8000a36 <USART_Init+0xae>
    {
        // Implement the code to enale the parity control
        tempreg |= (1 << USART_CR1_PCE_SHIFT);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	60fb      	str	r3, [r7, #12]

        // Implement the code to enable EVEN parity
        tempreg &= ~(1 << USART_CR1_PS_SHIFT);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e00b      	b.n	8000a4e <USART_Init+0xc6>

        // Not required because by default EVEN parity will be selected once you enable the parity control
    }
    else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b9b      	ldrb	r3, [r3, #14]
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d107      	bne.n	8000a4e <USART_Init+0xc6>
    {
        // Implement the code to enable the parity control
        tempreg |= (1 << USART_CR1_PCE_SHIFT);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a44:	60fb      	str	r3, [r7, #12]

        // Implement the code to enable ODD parity
        tempreg |= (1 << USART_CR1_PS_SHIFT);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4c:	60fb      	str	r3, [r7, #12]
    }

    // Program the CR1 register
    pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	60da      	str	r2, [r3, #12]

    /******************************** Configuration of CR2******************************************/

    tempreg = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]

    // Implement the code to configure the number of stop bits inserted during USART frame transmission
    tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP_SHIFT;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7b1b      	ldrb	r3, [r3, #12]
 8000a5e:	031b      	lsls	r3, r3, #12
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    // Program the CR2 register
    pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

    /******************************** Configuration of CR3******************************************/

    tempreg = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

    // Configuration of USART hardware flow control
    if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7bdb      	ldrb	r3, [r3, #15]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d104      	bne.n	8000a86 <USART_Init+0xfe>
    {
        // Implement the code to enable CTS flow control
        tempreg |= (1 << USART_CR3_CTSE_SHIFT);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e010      	b.n	8000aa8 <USART_Init+0x120>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7bdb      	ldrb	r3, [r3, #15]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d104      	bne.n	8000a98 <USART_Init+0x110>
    {
        // Implement the code to enable RTS flow control
        tempreg |= (1 << USART_CR3_RTSE_SHIFT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e007      	b.n	8000aa8 <USART_Init+0x120>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7bdb      	ldrb	r3, [r3, #15]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d103      	bne.n	8000aa8 <USART_Init+0x120>
    {
        // Implement the code to enable both CTS and RTS Flow control
        tempreg |= ((1 << USART_CR3_CTSE_SHIFT) | (1 << USART_CR3_RTSE_SHIFT));
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000aa6:	60fb      	str	r3, [r7, #12]
    }

    pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	615a      	str	r2, [r3, #20]

    /* Clear pointer to RX buffer */
    pUSARTHandle->pRxBuffer = NULL;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
    /* Clear pointer to TX buffer */
    pUSARTHandle->pTxBuffer = NULL;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]

    /* Clear RX bus state */
    pUSARTHandle->RxStatus = USART_READY;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	765a      	strb	r2, [r3, #25]
    /* Clear TX bus state */
    pUSARTHandle->TxStatus = USART_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	761a      	strb	r2, [r3, #24]

    /* Clear RX buffer length */
    pUSARTHandle->RxLen = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
    /* Clear TX buffer length */
    pUSARTHandle->TxLen = 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40011400 	.word	0x40011400

08000af0 <USART_SetBaudRate>:

void USART_SetBaudRate(USART_Handle_Type *pUSARTHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    uint32_t usartdiv;

    // variables to hold Mantissa and Fraction values
    uint32_t M_part, F_part;

    uint32_t tempreg = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]

    // Get the value of APB bus clock in to the variable PCLKx
    if (pUSARTHandle->pUSARTx == USART1 || pUSARTHandle->pUSARTx == USART6)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a38      	ldr	r2, [pc, #224]	; (8000be4 <USART_SetBaudRate+0xf4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d004      	beq.n	8000b10 <USART_SetBaudRate+0x20>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <USART_SetBaudRate+0xf8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d103      	bne.n	8000b18 <USART_SetBaudRate+0x28>
    {
        // USART1 and USART6 are hanging on APB2 bus
        PCLKx = RCC_GetPCLK2Value();
 8000b10:	f7ff fe46 	bl	80007a0 <RCC_GetPCLK2Value>
 8000b14:	61f8      	str	r0, [r7, #28]
 8000b16:	e002      	b.n	8000b1e <USART_SetBaudRate+0x2e>
    }
    else
    {
        PCLKx = RCC_GetPCLK1Value();
 8000b18:	f7ff fde4 	bl	80006e4 <RCC_GetPCLK1Value>
 8000b1c:	61f8      	str	r0, [r7, #28]
    }

    // Check for OVER8 configuration bit
    if (pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_OVER8_SHIFT))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00c      	beq.n	8000b46 <USART_SetBaudRate+0x56>
    {
        // OVER8 = 1 , over sampling by 8
        usartdiv = ((25 * PCLKx) / (2 * pUSARTHandle->USART_Config.USART_Baud));
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009a      	lsls	r2, r3, #2
 8000b36:	441a      	add	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	e00b      	b.n	8000b5e <USART_SetBaudRate+0x6e>
    }
    else
    {
        // over sampling by 16
        usartdiv = ((25 * PCLKx) / (4 * pUSARTHandle->USART_Config.USART_Baud));
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009a      	lsls	r2, r3, #2
 8000b50:	441a      	add	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5c:	61bb      	str	r3, [r7, #24]
    }

    // Calculate the Mantissa part
    M_part = usartdiv / 100;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <USART_SetBaudRate+0xfc>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	60fb      	str	r3, [r7, #12]

    // Place the Mantissa part in appropriate bit position . refer USART_BRR
    tempreg |= M_part << 4;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]

    // Extract the fraction part
    F_part = (usartdiv - (M_part * 100));
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2264      	movs	r2, #100	; 0x64
 8000b78:	fb02 f303 	mul.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]

    // Calculate the final fractional
    if (pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_OVER8_SHIFT))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00a      	beq.n	8000ba6 <USART_SetBaudRate+0xb6>
    {
        // OVER8 = 1 , over sampling by 8
        F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	3332      	adds	r3, #50	; 0x32
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <USART_SetBaudRate+0xfc>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e009      	b.n	8000bba <USART_SetBaudRate+0xca>
    }
    else
    {
        // over sampling by 16
        F_part = (((F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	3332      	adds	r3, #50	; 0x32
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <USART_SetBaudRate+0xfc>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	617b      	str	r3, [r7, #20]
    }

    // Place the fractional part in appropriate bit position . refer USART_BRR
    tempreg |= F_part;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]

    // copy the value of tempreg in to BRR register
    pUSARTHandle->pUSARTx->BRR = tempreg;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	609a      	str	r2, [r3, #8]

    // Enable USART
    pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE_SHIFT);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bd8:	60da      	str	r2, [r3, #12]
}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40011400 	.word	0x40011400
 8000bec:	51eb851f 	.word	0x51eb851f

08000bf0 <USART_GetFlagStatus>:

uint8 USART_GetFlagStatus(USART_Type *pUSARTx, uint8 StatusFlagShift)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
    uint8 temp;
    switch (StatusFlagShift)
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b09      	cmp	r3, #9
 8000c00:	d865      	bhi.n	8000cce <USART_GetFlagStatus+0xde>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <USART_GetFlagStatus+0x18>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000cc1 	.word	0x08000cc1
 8000c0c:	08000cb1 	.word	0x08000cb1
 8000c10:	08000ca1 	.word	0x08000ca1
 8000c14:	08000c91 	.word	0x08000c91
 8000c18:	08000c81 	.word	0x08000c81
 8000c1c:	08000c71 	.word	0x08000c71
 8000c20:	08000c61 	.word	0x08000c61
 8000c24:	08000c51 	.word	0x08000c51
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c31 	.word	0x08000c31
    {
    case CTS_flag:
        /* Get flag status of CTS flag */
        temp = (pUSARTx->SR >> USART_SR_CTS_SHIFT) & 0X01U;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	0a5b      	lsrs	r3, r3, #9
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c3e:	e047      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case LBD_flag:
        /* Get flag status of LBD flag */
        temp = (pUSARTx->SR >> USART_SR_LBD_SHIFT) & 0X01U;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c4e:	e03f      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case TXE_flag:
        /* Get flag status of TXE flag */
        temp = (pUSARTx->SR >> USART_SR_TXE_SHIFT) & 0X01U;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	09db      	lsrs	r3, r3, #7
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c5e:	e037      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case TC_flag:
        /* Get flag status of TC flag */
        temp = (pUSARTx->SR >> USART_SR_TC_SHIFT) & 0X01U;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	099b      	lsrs	r3, r3, #6
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c6e:	e02f      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case RXNE_flag:
        /* Get flag status of RXNE flag */
        temp = (pUSARTx->SR >> USART_SR_RXNE_SHIFT) & 0X01U;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c7e:	e027      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case IDLE_flag:
        /* Get flag status of IDLE flag */
        temp = (pUSARTx->SR >> USART_SR_IDLE_SHIFT) & 0X01U;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c8e:	e01f      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case ORE_flag:
        /* Get flag status of ORE flag */
        temp = (pUSARTx->SR >> USART_SR_ORE_SHIFT) & 0X01U;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c9e:	e017      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case NF_flag:
        /* Get flag status of NF flag */
        temp = (pUSARTx->SR >> USART_SR_NF_SHIFT) & 0X01U;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
        break;
 8000cae:	e00f      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case FE_flag:
        /* Get flag status of FE flag */
        temp = (pUSARTx->SR >> USART_SR_FE_SHIFT) & 0X01U;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	085b      	lsrs	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8000cbe:	e007      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    case PE_flag:
        /* Get flag status of PE flag */
        temp = (pUSARTx->SR >> USART_SR_PE_SHIFT) & 0X01U;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
        break;
 8000ccc:	e000      	b.n	8000cd0 <USART_GetFlagStatus+0xe0>
    default:
        break;
 8000cce:	bf00      	nop
    }

    return temp;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <USART_ClearFlagStatus>:
void USART_ClearFlagStatus(USART_Type *pUSARTx, uint8 StatusFlagShift)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
    pUSARTx->SR &= ~(1 << StatusFlagShift);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	78fa      	ldrb	r2, [r7, #3]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <USART_ReadIT>:
    }
    return TXState;
}

uint8 USART_ReadIT(USART_Handle_Type *pUSARTHandle, uint8 *pRxBuffer, uint32 Len)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
    uint8 RXState = pUSARTHandle->RxStatus;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	7e5b      	ldrb	r3, [r3, #25]
 8000d1c:	75fb      	strb	r3, [r7, #23]
    if (RXState != USART_BUSY_IN_RX)
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d022      	beq.n	8000d6a <USART_ReadIT+0x5e>
    {
        if (Len > 0)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d01f      	beq.n	8000d6a <USART_ReadIT+0x5e>
            /* Setup UE to disable USARTx in CR1 */
            // pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_UE_SHIFT);

            /* Setup pointer to RX buffer */
            // *pRxBuffer = NULL;
            pUSARTHandle->pRxBuffer = pRxBuffer;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	615a      	str	r2, [r3, #20]

            /* Setup RX bus state */
            pUSARTHandle->RxStatus = USART_BUSY_IN_RX;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2202      	movs	r2, #2
 8000d34:	765a      	strb	r2, [r3, #25]

            /* Setup RX buffer length */
            pUSARTHandle->RxLen = Len;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	621a      	str	r2, [r3, #32]

            /* Setup RXNEIE to enbble RXNE interrupt request from SR register */
            pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE_SHIFT);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0220 	orr.w	r2, r2, #32
 8000d4a:	60da      	str	r2, [r3, #12]

            /* Setup UE to enable USARTx in CR1 */
            if (!(pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_UE_SHIFT)))
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <USART_ReadIT+0x5e>
            {
                pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE_SHIFT);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d68:	60da      	str	r2, [r3, #12]
            }
        }
    }
    return RXState;
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <USART_IRQHandling>:

void USART_IRQHandling(USART_Handle_Type *pUSARTHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    uint16 *p_u16data = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
    /* Check interrupt request flag */
    /********************************** TC FLAG *************************************/
    if (USART_GetFlagStatus(pUSARTHandle->pUSARTx, TC_flag))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2106      	movs	r1, #6
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff30 	bl	8000bf0 <USART_GetFlagStatus>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d02e      	beq.n	8000df4 <USART_IRQHandling+0x7c>
    {
        /* Check TX bus state */
        if (pUSARTHandle->TxStatus == USART_BUSY_IN_TX)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7e1b      	ldrb	r3, [r3, #24]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d12a      	bne.n	8000df4 <USART_IRQHandling+0x7c>
        {
            if (pUSARTHandle->TxLen == 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d126      	bne.n	8000df4 <USART_IRQHandling+0x7c>
            {
                /* Clear TC flag to avoid pending */
                USART_ClearFlagStatus(pUSARTHandle->pUSARTx, TC_flag);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2106      	movs	r1, #6
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff97 	bl	8000ce0 <USART_ClearFlagStatus>

                /* Clear TCIE control bit to disable interrupt request flag from TXE */
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE_SHIFT);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc0:	60da      	str	r2, [r3, #12]

                /* Clear TXEIE control bit to disable interrupt request flag from TXE */
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE_SHIFT);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd0:	60da      	str	r2, [r3, #12]

                /* Clear TX buffer */
                pUSARTHandle->pTxBuffer = NULL;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]

                /* Clear TX status  */
                pUSARTHandle->TxStatus = USART_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]

                pUSARTHandle->TxLen = 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]

                /* Setup TXEIE and ICIE to disable transmit */
                pUSARTHandle->pUSARTx->CR1 &= ~((1 << USART_CR1_TXEIE_SHIFT) | (1 << USART_CR1_TCIE_SHIFT));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000df2:	60da      	str	r2, [r3, #12]
            }
        }
    }

    /********************************** TXE FLAG ************************************/
    if (USART_GetFlagStatus(pUSARTHandle->pUSARTx, TXE_flag))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2107      	movs	r1, #7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fef8 	bl	8000bf0 <USART_GetFlagStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d04d      	beq.n	8000ea2 <USART_IRQHandling+0x12a>
    {
        /* Check TX bus state */
        if (pUSARTHandle->TxStatus == USART_BUSY_IN_TX)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7e1b      	ldrb	r3, [r3, #24]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d149      	bne.n	8000ea2 <USART_IRQHandling+0x12a>
        {
            if (pUSARTHandle->TxLen > 0)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d039      	beq.n	8000e8a <USART_IRQHandling+0x112>
            {
                /* If transmit 9 BIT */
                if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7b5b      	ldrb	r3, [r3, #13]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d124      	bne.n	8000e68 <USART_IRQHandling+0xf0>
                {
                    /* if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits */
                    p_u16data = (uint16 *)pUSARTHandle->pTxBuffer;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	60fb      	str	r3, [r7, #12]
                    pUSARTHandle->pUSARTx->DR = (*(p_u16data) & (uint16_t)0x01FF);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e32:	605a      	str	r2, [r3, #4]

                    /* If parity control is used in buffer */
                    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7b9b      	ldrb	r3, [r3, #14]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10a      	bne.n	8000e52 <USART_IRQHandling+0xda>
                    {
                        /* Increment the pointer to TX buffer */
                        pUSARTHandle->pTxBuffer++;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
                        pUSARTHandle->pTxBuffer++;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	e004      	b.n	8000e5c <USART_IRQHandling+0xe4>
                    }
                    else
                    {
                        /* Increment the pointer to TX buffer */
                        pUSARTHandle->pTxBuffer++;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
                    }

                    /* decrement TX buffer length */
                    pUSARTHandle->TxLen -= 2;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	1e9a      	subs	r2, r3, #2
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	61da      	str	r2, [r3, #28]
 8000e66:	e01c      	b.n	8000ea2 <USART_IRQHandling+0x12a>
                }
                /* If transmit 8 bit */
                else
                {
                    // This is 8bit data transfer
                    pUSARTHandle->pUSARTx->DR = (*(pUSARTHandle->pTxBuffer) & (uint8_t)0xFF);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]

                    /* Increment the pointer to TX buffer */
                    pUSARTHandle->pTxBuffer++;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	611a      	str	r2, [r3, #16]

                    /* decrement TX buffer length */
                    pUSARTHandle->TxLen--;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	61da      	str	r2, [r3, #28]
 8000e88:	e00b      	b.n	8000ea2 <USART_IRQHandling+0x12a>
                }
            }
            else if (pUSARTHandle->TxLen == 0)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <USART_IRQHandling+0x12a>
            {
                /* Clear TXEIE control bit to disable interrupt request flag from TXE */
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE_SHIFT);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea0:	60da      	str	r2, [r3, #12]
            }
        }
    }

    /********************************** RXNE FLAG **********************************/
    if (USART_GetFlagStatus(pUSARTHandle->pUSARTx, RXNE_flag))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fea1 	bl	8000bf0 <USART_GetFlagStatus>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d074      	beq.n	8000f9e <USART_IRQHandling+0x226>
    {
        if (pUSARTHandle->RxStatus == USART_BUSY_IN_RX)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7e5b      	ldrb	r3, [r3, #25]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d170      	bne.n	8000f9e <USART_IRQHandling+0x226>
        {
            if (pUSARTHandle->RxLen > 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d053      	beq.n	8000f6c <USART_IRQHandling+0x1f4>
            {
                /* Clear RXNE flag to avoid pending interrupt */
                // USART_ClearFlagStatus(pUSARTHandle->pUSARTx, RXNE_flag);

                /* Check the USART_WordLength item for 9BIT or 8BIT in a frame */
                if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7b5b      	ldrb	r3, [r3, #13]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d12f      	bne.n	8000f2c <USART_IRQHandling+0x1b4>
                {

                    /* If parity control is used in buffer */
                    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7b9b      	ldrb	r3, [r3, #14]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d119      	bne.n	8000f08 <USART_IRQHandling+0x190>
                    {
                        /* if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits */
                        *((uint16 *)pUSARTHandle->pRxBuffer) = (uint16)(pUSARTHandle->pUSARTx->DR & (uint16)0X1FFU);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee4:	b292      	uxth	r2, r2
 8000ee6:	801a      	strh	r2, [r3, #0]
                        /* Increment the pointer to RX buffer */
                        pUSARTHandle->pRxBuffer++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	615a      	str	r2, [r3, #20]
                        pUSARTHandle->pRxBuffer++;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	615a      	str	r2, [r3, #20]

                        /* decrement RX buffer length */
                        pUSARTHandle->RxLen -= 2;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	1e9a      	subs	r2, r3, #2
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	621a      	str	r2, [r3, #32]
 8000f06:	e031      	b.n	8000f6c <USART_IRQHandling+0x1f4>
                    }
                    else
                    {
                        /* if 8BIT, load the DR with 1bytes masking */
                        *(pUSARTHandle->pRxBuffer) = (uint8)(pUSARTHandle->pUSARTx->DR & (uint8)0XFFU);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	701a      	strb	r2, [r3, #0]

                        /* Increment the pointer to RX buffer */
                        pUSARTHandle->pRxBuffer++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]

                        /* decrement RX buffer length */
                        pUSARTHandle->RxLen--;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
 8000f2a:	e01f      	b.n	8000f6c <USART_IRQHandling+0x1f4>
                    }
                }
                else
                {
                    /* If parity control is used in buffer */
                    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7b9b      	ldrb	r3, [r3, #14]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <USART_IRQHandling+0x1cc>
                    {
                        /* if 8BIT, load the DR with 1bytes masking */
                        *(pUSARTHandle->pRxBuffer) = (uint8)(pUSARTHandle->pUSARTx->DR & (uint8)0XFFU);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e009      	b.n	8000f58 <USART_IRQHandling+0x1e0>
                    }
                    else
                    {
                        /* if 7BIT, load the DR with 1bytes masking the bits other than first 8 bits */
                        *(pUSARTHandle->pRxBuffer) = (uint8)(pUSARTHandle->pUSARTx->DR & (uint8)0X7FU);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	701a      	strb	r2, [r3, #0]
                    }

                    /* Increment the pointer to RX buffer */
                    pUSARTHandle->pRxBuffer++;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	615a      	str	r2, [r3, #20]

                    /* decrement RX buffer length */
                    pUSARTHandle->RxLen--;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	621a      	str	r2, [r3, #32]
                }
            }
            if (pUSARTHandle->RxLen == 0)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d114      	bne.n	8000f9e <USART_IRQHandling+0x226>
            {
                if (pUSARTHandle->RxStatus == USART_BUSY_IN_RX)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e5b      	ldrb	r3, [r3, #25]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d110      	bne.n	8000f9e <USART_IRQHandling+0x226>
                {
                    /* Clear RXNE flag to avoid pending interrupt */
                    // USART_ClearFlagStatus(pUSARTHandle->pUSARTx, RXNE_flag);

                    /* Clear pointer to RX buffer */
                    pUSARTHandle->pRxBuffer = NULL;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]

                    /* Clear RX bus state */
                    pUSARTHandle->RxStatus = USART_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]

                    /* Clear RX buffer length */
                    pUSARTHandle->RxLen = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]

                    /* Clear RXNEIE to disable RXNE interrupt request from SR register */
                    pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE_SHIFT);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0220 	bic.w	r2, r2, #32
 8000f9c:	60da      	str	r2, [r3, #12]
                    // pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_UE_SHIFT);
                }
            }
        }
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <main>:

/****************************************************************/
/*  MAIN FUNCTION	                                            */
/****************************************************************/
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    g_u8ButtonState = 1;
 8000fae:	4b6b      	ldr	r3, [pc, #428]	; (800115c <main+0x1b4>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
    g_u8LedState = 0;
 8000fb4:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <main+0x1b8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    g_u8LedOrder = 1;
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <main+0x1bc>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
    g_systick = 0;
 8000fc0:	4b69      	ldr	r3, [pc, #420]	; (8001168 <main+0x1c0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	Led.pGPIOx = GPIOD;
 8000fc6:	4b69      	ldr	r3, [pc, #420]	; (800116c <main+0x1c4>)
 8000fc8:	4a69      	ldr	r2, [pc, #420]	; (8001170 <main+0x1c8>)
 8000fca:	601a      	str	r2, [r3, #0]
	Led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <main+0x1c4>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	715a      	strb	r2, [r3, #5]
	Led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(12);
 8000fd2:	4b66      	ldr	r3, [pc, #408]	; (800116c <main+0x1c4>)
 8000fd4:	220c      	movs	r2, #12
 8000fd6:	711a      	strb	r2, [r3, #4]
	Led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <main+0x1c4>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	719a      	strb	r2, [r3, #6]
	Led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <main+0x1c4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	721a      	strb	r2, [r3, #8]
	Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000fe4:	4b61      	ldr	r3, [pc, #388]	; (800116c <main+0x1c4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	71da      	strb	r2, [r3, #7]

	Led2.pGPIOx = GPIOD;
 8000fea:	4b62      	ldr	r3, [pc, #392]	; (8001174 <main+0x1cc>)
 8000fec:	4a60      	ldr	r2, [pc, #384]	; (8001170 <main+0x1c8>)
 8000fee:	601a      	str	r2, [r3, #0]
	Led2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000ff0:	4b60      	ldr	r3, [pc, #384]	; (8001174 <main+0x1cc>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	715a      	strb	r2, [r3, #5]
	Led2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(13);
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <main+0x1cc>)
 8000ff8:	220d      	movs	r2, #13
 8000ffa:	711a      	strb	r2, [r3, #4]
	Led2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <main+0x1cc>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	719a      	strb	r2, [r3, #6]
	Led2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <main+0x1cc>)
 8001004:	2200      	movs	r2, #0
 8001006:	721a      	strb	r2, [r3, #8]
	Led2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <main+0x1cc>)
 800100a:	2200      	movs	r2, #0
 800100c:	71da      	strb	r2, [r3, #7]

	Led3.pGPIOx = GPIOD;
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <main+0x1d0>)
 8001010:	4a57      	ldr	r2, [pc, #348]	; (8001170 <main+0x1c8>)
 8001012:	601a      	str	r2, [r3, #0]
	Led3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <main+0x1d0>)
 8001016:	2201      	movs	r2, #1
 8001018:	715a      	strb	r2, [r3, #5]
	Led3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(15);
 800101a:	4b57      	ldr	r3, [pc, #348]	; (8001178 <main+0x1d0>)
 800101c:	220f      	movs	r2, #15
 800101e:	711a      	strb	r2, [r3, #4]
	Led3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001020:	4b55      	ldr	r3, [pc, #340]	; (8001178 <main+0x1d0>)
 8001022:	2202      	movs	r2, #2
 8001024:	719a      	strb	r2, [r3, #6]
	Led3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <main+0x1d0>)
 8001028:	2200      	movs	r2, #0
 800102a:	721a      	strb	r2, [r3, #8]
	Led3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800102c:	4b52      	ldr	r3, [pc, #328]	; (8001178 <main+0x1d0>)
 800102e:	2200      	movs	r2, #0
 8001030:	71da      	strb	r2, [r3, #7]

	Led4.pGPIOx = GPIOD;
 8001032:	4b52      	ldr	r3, [pc, #328]	; (800117c <main+0x1d4>)
 8001034:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <main+0x1c8>)
 8001036:	601a      	str	r2, [r3, #0]
	Led4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <main+0x1d4>)
 800103a:	2201      	movs	r2, #1
 800103c:	715a      	strb	r2, [r3, #5]
	Led4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(14);
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <main+0x1d4>)
 8001040:	220e      	movs	r2, #14
 8001042:	711a      	strb	r2, [r3, #4]
	Led4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <main+0x1d4>)
 8001046:	2202      	movs	r2, #2
 8001048:	719a      	strb	r2, [r3, #6]
	Led4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <main+0x1d4>)
 800104c:	2200      	movs	r2, #0
 800104e:	721a      	strb	r2, [r3, #8]
	Led4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <main+0x1d4>)
 8001052:	2200      	movs	r2, #0
 8001054:	71da      	strb	r2, [r3, #7]

	TX_Pin.pGPIOx = GPIOA;
 8001056:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <main+0x1d8>)
 8001058:	4a4a      	ldr	r2, [pc, #296]	; (8001184 <main+0x1dc>)
 800105a:	601a      	str	r2, [r3, #0]
	TX_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <main+0x1d8>)
 800105e:	2202      	movs	r2, #2
 8001060:	715a      	strb	r2, [r3, #5]
	TX_Pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001062:	4b47      	ldr	r3, [pc, #284]	; (8001180 <main+0x1d8>)
 8001064:	2202      	movs	r2, #2
 8001066:	719a      	strb	r2, [r3, #6]
	TX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(2);
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <main+0x1d8>)
 800106a:	2202      	movs	r2, #2
 800106c:	711a      	strb	r2, [r3, #4]
	TX_Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <main+0x1d8>)
 8001070:	2201      	movs	r2, #1
 8001072:	71da      	strb	r2, [r3, #7]
	TX_Pin.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_NUM(7);
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <main+0x1d8>)
 8001076:	2207      	movs	r2, #7
 8001078:	725a      	strb	r2, [r3, #9]

	RX_Pin.pGPIOx = GPIOA;
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <main+0x1e0>)
 800107c:	4a41      	ldr	r2, [pc, #260]	; (8001184 <main+0x1dc>)
 800107e:	601a      	str	r2, [r3, #0]
	RX_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <main+0x1e0>)
 8001082:	2202      	movs	r2, #2
 8001084:	715a      	strb	r2, [r3, #5]
	RX_Pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001086:	4b40      	ldr	r3, [pc, #256]	; (8001188 <main+0x1e0>)
 8001088:	2200      	movs	r2, #0
 800108a:	721a      	strb	r2, [r3, #8]
	RX_Pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800108c:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <main+0x1e0>)
 800108e:	2202      	movs	r2, #2
 8001090:	719a      	strb	r2, [r3, #6]
	RX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(3);
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <main+0x1e0>)
 8001094:	2203      	movs	r2, #3
 8001096:	711a      	strb	r2, [r3, #4]
	RX_Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <main+0x1e0>)
 800109a:	2201      	movs	r2, #1
 800109c:	71da      	strb	r2, [r3, #7]
	RX_Pin.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_NUM(7);
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <main+0x1e0>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	725a      	strb	r2, [r3, #9]

	Usart2.pUSARTx = USART2;
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <main+0x1e4>)
 80010a6:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <main+0x1e8>)
 80010a8:	601a      	str	r2, [r3, #0]
	Usart2.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <main+0x1e4>)
 80010ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010b0:	609a      	str	r2, [r3, #8]
	Usart2.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <main+0x1e4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	73da      	strb	r2, [r3, #15]
	Usart2.USART_Config.USART_Mode = USART_MODE_TXRX;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <main+0x1e4>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	711a      	strb	r2, [r3, #4]
	Usart2.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <main+0x1e4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	731a      	strb	r2, [r3, #12]
	Usart2.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <main+0x1e4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	735a      	strb	r2, [r3, #13]
	Usart2.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <main+0x1e4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	739a      	strb	r2, [r3, #14]

	/*peripheral clock configuration*/
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80010d0:	2101      	movs	r1, #1
 80010d2:	482c      	ldr	r0, [pc, #176]	; (8001184 <main+0x1dc>)
 80010d4:	f7ff f880 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOB, ENABLE);
 80010d8:	2101      	movs	r1, #1
 80010da:	482e      	ldr	r0, [pc, #184]	; (8001194 <main+0x1ec>)
 80010dc:	f7ff f87c 	bl	80001d8 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80010e0:	2101      	movs	r1, #1
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <main+0x1c8>)
 80010e4:	f7ff f878 	bl	80001d8 <GPIO_PeriClockControl>
	USART_PeriClockControl(USART2, ENABLE);
 80010e8:	2101      	movs	r1, #1
 80010ea:	4829      	ldr	r0, [pc, #164]	; (8001190 <main+0x1e8>)
 80010ec:	f7ff fbf0 	bl	80008d0 <USART_PeriClockControl>

	/*GPIO initialization*/
	GPIO_Init(&Led);
 80010f0:	481e      	ldr	r0, [pc, #120]	; (800116c <main+0x1c4>)
 80010f2:	f7ff f915 	bl	8000320 <GPIO_Init>
	GPIO_Init(&Led2);
 80010f6:	481f      	ldr	r0, [pc, #124]	; (8001174 <main+0x1cc>)
 80010f8:	f7ff f912 	bl	8000320 <GPIO_Init>
	GPIO_Init(&Led3);
 80010fc:	481e      	ldr	r0, [pc, #120]	; (8001178 <main+0x1d0>)
 80010fe:	f7ff f90f 	bl	8000320 <GPIO_Init>
	GPIO_Init(&Led4);
 8001102:	481e      	ldr	r0, [pc, #120]	; (800117c <main+0x1d4>)
 8001104:	f7ff f90c 	bl	8000320 <GPIO_Init>
	GPIO_Init(&TX_Pin);
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <main+0x1d8>)
 800110a:	f7ff f909 	bl	8000320 <GPIO_Init>
	GPIO_Init(&RX_Pin);
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <main+0x1e0>)
 8001110:	f7ff f906 	bl	8000320 <GPIO_Init>

	/*UASRT1 initialization*/
	USART_Init(&Usart2);
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <main+0x1e4>)
 8001116:	f7ff fc37 	bl	8000988 <USART_Init>
	USART_SetBaudRate(&Usart2);
 800111a:	481c      	ldr	r0, [pc, #112]	; (800118c <main+0x1e4>)
 800111c:	f7ff fce8 	bl	8000af0 <USART_SetBaudRate>

	/* Config NVIC for USART */
	NVIC_IRQConfig(38, 15, ENABLE);
 8001120:	2201      	movs	r2, #1
 8001122:	210f      	movs	r1, #15
 8001124:	2026      	movs	r0, #38	; 0x26
 8001126:	f7ff fa7d 	bl	8000624 <NVIC_IRQConfig>

    /* Config SysTick */
    SysTick_Init(1199999);
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <main+0x1f0>)
 800112c:	f7ff fb96 	bl	800085c <SysTick_Init>
    SysTick_StartTimer();
 8001130:	f7ff fbbe 	bl	80008b0 <SysTick_StartTimer>
    /* Loop forever */
	while(1)
	{
//		if(g_systick >= 10)
//		{
			volatile uint32 i = 0xffff;
 8001134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001138:	607b      	str	r3, [r7, #4]
			while(i--);
 800113a:	bf00      	nop
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1fa      	bne.n	800113c <main+0x194>
			while(USART_ReadIT(&Usart2, (uint8 *)read, 6) != USART_READY);
 8001146:	bf00      	nop
 8001148:	2206      	movs	r2, #6
 800114a:	4914      	ldr	r1, [pc, #80]	; (800119c <main+0x1f4>)
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <main+0x1e4>)
 800114e:	f7ff fddd 	bl	8000d0c <USART_ReadIT>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f7      	bne.n	8001148 <main+0x1a0>
	{
 8001158:	e7ec      	b.n	8001134 <main+0x18c>
 800115a:	bf00      	nop
 800115c:	20000034 	.word	0x20000034
 8001160:	2000003c 	.word	0x2000003c
 8001164:	20000035 	.word	0x20000035
 8001168:	20000038 	.word	0x20000038
 800116c:	20000040 	.word	0x20000040
 8001170:	40020c00 	.word	0x40020c00
 8001174:	2000004c 	.word	0x2000004c
 8001178:	20000058 	.word	0x20000058
 800117c:	20000064 	.word	0x20000064
 8001180:	20000070 	.word	0x20000070
 8001184:	40020000 	.word	0x40020000
 8001188:	2000007c 	.word	0x2000007c
 800118c:	20000088 	.word	0x20000088
 8001190:	40004400 	.word	0x40004400
 8001194:	40020400 	.word	0x40020400
 8001198:	00124f7f 	.word	0x00124f7f
 800119c:	200000ac 	.word	0x200000ac

080011a0 <USART2_IRQHandler>:
	}
	return 0;
}

void USART2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	USART_IRQHandling(&Usart2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <USART2_IRQHandler+0x10>)
 80011a6:	f7ff fde7 	bl	8000d78 <USART_IRQHandling>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000088 	.word	0x20000088

080011b4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	g_systick++;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Handler+0x18>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <SysTick_Handler+0x18>)
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000038 	.word	0x20000038

080011d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011fe:	f000 f811 	bl	8001224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff fed1 	bl	8000fa8 <main>

08001206 <LoopForever>:

LoopForever:
  b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001214:	0800128c 	.word	0x0800128c
  ldr r2, =_sbss
 8001218:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800121c:	200004ac 	.word	0x200004ac

08001220 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <__libc_init_array>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4d0d      	ldr	r5, [pc, #52]	; (800125c <__libc_init_array+0x38>)
 8001228:	4c0d      	ldr	r4, [pc, #52]	; (8001260 <__libc_init_array+0x3c>)
 800122a:	1b64      	subs	r4, r4, r5
 800122c:	10a4      	asrs	r4, r4, #2
 800122e:	2600      	movs	r6, #0
 8001230:	42a6      	cmp	r6, r4
 8001232:	d109      	bne.n	8001248 <__libc_init_array+0x24>
 8001234:	4d0b      	ldr	r5, [pc, #44]	; (8001264 <__libc_init_array+0x40>)
 8001236:	4c0c      	ldr	r4, [pc, #48]	; (8001268 <__libc_init_array+0x44>)
 8001238:	f000 f818 	bl	800126c <_init>
 800123c:	1b64      	subs	r4, r4, r5
 800123e:	10a4      	asrs	r4, r4, #2
 8001240:	2600      	movs	r6, #0
 8001242:	42a6      	cmp	r6, r4
 8001244:	d105      	bne.n	8001252 <__libc_init_array+0x2e>
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	f855 3b04 	ldr.w	r3, [r5], #4
 800124c:	4798      	blx	r3
 800124e:	3601      	adds	r6, #1
 8001250:	e7ee      	b.n	8001230 <__libc_init_array+0xc>
 8001252:	f855 3b04 	ldr.w	r3, [r5], #4
 8001256:	4798      	blx	r3
 8001258:	3601      	adds	r6, #1
 800125a:	e7f2      	b.n	8001242 <__libc_init_array+0x1e>
 800125c:	08001284 	.word	0x08001284
 8001260:	08001284 	.word	0x08001284
 8001264:	08001284 	.word	0x08001284
 8001268:	08001288 	.word	0x08001288

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
