
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014dc  080014dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080014dc  080014dc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080014dc  080014dc  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014dc  080014dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080014e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000007c  08001560  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08001560  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000222f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000943  00000000  00000000  000222db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00022c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00022e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029e5  00000000  00000000  00022ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b33  00000000  00000000  000259dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a601  00000000  00000000  00028510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032b11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000904  00000000  00000000  00032b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080014c4 	.word	0x080014c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080014c4 	.word	0x080014c4

080001d8 <Os_SchedulerLaunch>:
	.thumb
	.thumb_func
	.type	Os_SchedulerLaunch, %function
Os_SchedulerLaunch:
	.cfi_startproc
	CPSID I						/* Disable global exceptions */
 80001d8:	b672      	cpsid	i

	LDR R0, =Os_CurrentTCB		/* R0 = address of Os_CurrentTCB pointer */
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <PendSV_Handler+0x28>)
	LDR R2, [R0]				/* R2 = address of TCB */
 80001dc:	6802      	ldr	r2, [r0, #0]

	LDR SP, [R2]				/* SP = stackPtr of TCB */
 80001de:	f8d2 d000 	ldr.w	sp, [r2]
	POP {R4-R11}				/* Pop values at SP to R4, R5, R6, R7, R8, R9, R10, R11 */
 80001e2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	POP {R0-R3}					/* Pop values at SP to R0, R1, R2, R3 */
 80001e6:	bc0f      	pop	{r0, r1, r2, r3}
	POP {R12}					/* Pop values at SP R12 */
 80001e8:	f85d cb04 	ldr.w	ip, [sp], #4
	ADD SP, SP, #4				/* Skip LR value by decreasing 4 bytes */
 80001ec:	b001      	add	sp, #4
	POP {LR}					/* Pop values(PC) at LR */
 80001ee:	f85d eb04 	ldr.w	lr, [sp], #4
	ADD SP, SP, #4				/* Skip xPSR value by decreasing 4 bytes */
 80001f2:	b001      	add	sp, #4

	CPSIE I						/* Enable global exceptions */
 80001f4:	b662      	cpsie	i

	BX LR						/* Jump to the first task */
 80001f6:	4770      	bx	lr

080001f8 <PendSV_Handler>:
	.extern Os_SchedulerRoundRobin
	.thumb
	.thumb_func
	.type	PendSV_Handler, %function
PendSV_Handler:
	CPSID I						/* Disable global exceptions */
 80001f8:	b672      	cpsid	i
	PUSH {R4-R11}				/* Store R4-R11 registers to stack */
 80001fa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	LDR R0, =Os_CurrentTCB			/* R0 = address of Os_CurrentTCB pointer */
 80001fe:	4808      	ldr	r0, [pc, #32]	; (8000220 <PendSV_Handler+0x28>)
	LDR R1, [R0]				/* R1 = address of TCB */
 8000200:	6801      	ldr	r1, [r0, #0]

	STR SP, [R1]				/* stackPtr = SP */
 8000202:	f8c1 d000 	str.w	sp, [r1]

	PUSH {R0, LR}				/* Push address of Os_CurrentTCB and LR */
 8000206:	b501      	push	{r0, lr}
	BL Os_SchedulerRoundRobin	/* Call Os_SchedulerRoundRobin */
 8000208:	f000 f974 	bl	80004f4 <Os_SchedulerRoundRobin>
	POP {R0, LR}				/* Pop address of Os_CurrentTCB and LR */
 800020c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
	LDR R1, [R0]				/* R1 = address of TCB */
 8000210:	6801      	ldr	r1, [r0, #0]

	LDR SP, [R1]				/* SP = stackPtr */
 8000212:	f8d1 d000 	ldr.w	sp, [r1]
	POP {R4-R11}				/* Restore R4-R11 into register bank before exiting exception */
 8000216:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	CPSIE I						/* Enable global exceptions */
 800021a:	b662      	cpsie	i
	BX LR						/* Return from exception */
 800021c:	4770      	bx	lr
 800021e:	0000      	.short	0x0000
	LDR R0, =Os_CurrentTCB		/* R0 = address of Os_CurrentTCB pointer */
 8000220:	200000a4 	.word	0x200000a4

08000224 <Os_KernelStackInit>:
/******************************************************************************
 *  GLOBAL FUNCTION
 *****************************************************************************/
#if(DYNAMIC_ALLOCATION == STD_ON)
Os_ReturnType Os_KernelStackInit(void (*ThreadTask)(void), uint32 StackSize)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
    /* Initialize local variables */
    Os_ReturnType Retval = E_OK;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]
    uint8 lucNumberOfThread;
    Os_TcbType *lpCurrentTCB;
    lucNumberOfThread = Os_NumberOfThread;
 8000232:	4b65      	ldr	r3, [pc, #404]	; (80003c8 <Os_KernelStackInit+0x1a4>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	72bb      	strb	r3, [r7, #10]
    lpCurrentTCB = Os_CurrentTCB;
 8000238:	4b64      	ldr	r3, [pc, #400]	; (80003cc <Os_KernelStackInit+0x1a8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	60fb      	str	r3, [r7, #12]
    
    /* Disable global exceptions */
    asm volatile("CPSID I");
 800023e:	b672      	cpsid	i

    /* Check NULL_PTR for Os_CurrentTCB */
    if (Os_CurrentTCB == NULL_PTR)
 8000240:	4b62      	ldr	r3, [pc, #392]	; (80003cc <Os_KernelStackInit+0x1a8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d10e      	bne.n	8000266 <Os_KernelStackInit+0x42>
    {
        Os_CurrentTCB = (Os_TcbType *)calloc(1, sizeof(Os_TcbType));
 8000248:	2118      	movs	r1, #24
 800024a:	2001      	movs	r0, #1
 800024c:	f001 f838 	bl	80012c0 <calloc>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	4b5d      	ldr	r3, [pc, #372]	; (80003cc <Os_KernelStackInit+0x1a8>)
 8000256:	601a      	str	r2, [r3, #0]
        lpCurrentTCB = Os_CurrentTCB;
 8000258:	4b5c      	ldr	r3, [pc, #368]	; (80003cc <Os_KernelStackInit+0x1a8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	e01b      	b.n	8000298 <Os_KernelStackInit+0x74>
    }
    else /* Os_CurrentTCB != NULL_PTR */
    {
        while (lpCurrentTCB->nextPtr != NULL && lpCurrentTCB->nextPtr != Os_CurrentTCB)
        {
            lpCurrentTCB = lpCurrentTCB->nextPtr;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	60fb      	str	r3, [r7, #12]
        while (lpCurrentTCB->nextPtr != NULL && lpCurrentTCB->nextPtr != Os_CurrentTCB)
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d005      	beq.n	800027a <Os_KernelStackInit+0x56>
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	4b56      	ldr	r3, [pc, #344]	; (80003cc <Os_KernelStackInit+0x1a8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d1f2      	bne.n	8000260 <Os_KernelStackInit+0x3c>
        }

        lpCurrentTCB->nextPtr = (Os_TcbType *)calloc(1, sizeof(Os_TcbType));
 800027a:	2118      	movs	r1, #24
 800027c:	2001      	movs	r0, #1
 800027e:	f001 f81f 	bl	80012c0 <calloc>
 8000282:	4603      	mov	r3, r0
 8000284:	461a      	mov	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	605a      	str	r2, [r3, #4]
        lpCurrentTCB = lpCurrentTCB->nextPtr;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	60fb      	str	r3, [r7, #12]
        lpCurrentTCB->nextPtr = Os_CurrentTCB;
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <Os_KernelStackInit+0x1a8>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	605a      	str	r2, [r3, #4]
    }

    /* Check TCP pointer failed to allocate TCB */
    if (lpCurrentTCB == NULL_PTR)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d103      	bne.n	80002a6 <Os_KernelStackInit+0x82>
    {
        Retval = E_NOT_OK;
 800029e:	2301      	movs	r3, #1
 80002a0:	72fb      	strb	r3, [r7, #11]
        return Retval;
 80002a2:	7afb      	ldrb	r3, [r7, #11]
 80002a4:	e08c      	b.n	80003c0 <Os_KernelStackInit+0x19c>
    }

    lpCurrentTCB->stackPtr = (Os_RegType *)calloc(StackSize, sizeof(Os_RegType));
 80002a6:	2104      	movs	r1, #4
 80002a8:	6838      	ldr	r0, [r7, #0]
 80002aa:	f001 f809 	bl	80012c0 <calloc>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
    
    /* Check TCP pointer failed to allocate Stack */
    if (lpCurrentTCB->stackPtr == NULL_PTR)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d103      	bne.n	80002c6 <Os_KernelStackInit+0xa2>
    {
        Retval = E_NOT_OK;
 80002be:	2301      	movs	r3, #1
 80002c0:	72fb      	strb	r3, [r7, #11]
        return Retval;
 80002c2:	7afb      	ldrb	r3, [r7, #11]
 80002c4:	e07c      	b.n	80003c0 <Os_KernelStackInit+0x19c>
    }

    lpCurrentTCB->stackSize = StackSize;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	611a      	str	r2, [r3, #16]
    /* Initialize pointer to begin of stack */
    lpCurrentTCB->stackBegin = lpCurrentTCB->stackPtr + StackSize - 1;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002d6:	3b01      	subs	r3, #1
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	441a      	add	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	609a      	str	r2, [r3, #8]
    /* Initialize pointer to end of stack */
    lpCurrentTCB->stackEnd = lpCurrentTCB->stackPtr;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	60da      	str	r2, [r3, #12]
    /* Rechange position of stack pointer to top of stack */
    lpCurrentTCB->stackPtr = lpCurrentTCB->stackBegin - 15;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	601a      	str	r2, [r3, #0]

    /* Initialize dummy values for General-Purpose Registers */
    /* Caller registers: xPSR, PC, LR, R12, R3, R2, R1, R0 */
    *(lpCurrentTCB->stackBegin - STACK_XPSR_OFFSET) = (1 << 24);                    /* xPSR: T bit = 1(Thump state) */
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002fc:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_PC_OFFSET) = (Os_RegType)(ThreadTask);       /* PC: function address */
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	3b04      	subs	r3, #4
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_LR_OFFSET) = 0XAAAAAAAAU;                    /* LR: link return */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	3b08      	subs	r3, #8
 800030e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000312:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R12_OFFSET) = 0XAAAAAAAAU;                   /* R12 */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	3b0c      	subs	r3, #12
 800031a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800031e:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R3_OFFSET) = 0XAAAAAAAAU;                    /* R3 */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	3b10      	subs	r3, #16
 8000326:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800032a:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R2_OFFSET) = 0XAAAAAAAAU;                    /* R2 */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	3b14      	subs	r3, #20
 8000332:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000336:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R1_OFFSET) = 0XAAAAAAAAU;                    /* R1 */
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	3b18      	subs	r3, #24
 800033e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000342:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R0_OFFSET) = 0XAAAAAAAAU;                    /* R0 */
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	3b1c      	subs	r3, #28
 800034a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800034e:	601a      	str	r2, [r3, #0]

    /* Callee register: R11, R10, R9, R8, R7, R6, R5, R4 */
    *(lpCurrentTCB->stackBegin - STACK_R11_OFFSET) = 0XAAAAAAAAU;                   /* R11 */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	3b20      	subs	r3, #32
 8000356:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800035a:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R10_OFFSET) = 0XAAAAAAAAU;                   /* R10 */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	3b24      	subs	r3, #36	; 0x24
 8000362:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000366:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R9_OFFSET) = 0XAAAAAAAAU;                    /* R9 */
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	3b28      	subs	r3, #40	; 0x28
 800036e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000372:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R8_OFFSET) = 0XAAAAAAAAU;                    /* R8 */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	3b2c      	subs	r3, #44	; 0x2c
 800037a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800037e:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R7_OFFSET) = 0XAAAAAAAAU;                    /* R7 */
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	3b30      	subs	r3, #48	; 0x30
 8000386:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800038a:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R6_OFFSET) = 0XAAAAAAAAU;                    /* R6 */
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	3b34      	subs	r3, #52	; 0x34
 8000392:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000396:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R5_OFFSET) = 0XAAAAAAAAU;                    /* R5 */
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	3b38      	subs	r3, #56	; 0x38
 800039e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003a2:	601a      	str	r2, [r3, #0]
    *(lpCurrentTCB->stackBegin - STACK_R4_OFFSET) = 0XAAAAAAAAU;                    /* R4 */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	3b3c      	subs	r3, #60	; 0x3c
 80003aa:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003ae:	601a      	str	r2, [r3, #0]

    /* Increase num of threads used */
    lucNumberOfThread++;
 80003b0:	7abb      	ldrb	r3, [r7, #10]
 80003b2:	3301      	adds	r3, #1
 80003b4:	72bb      	strb	r3, [r7, #10]
    Os_NumberOfThread = lucNumberOfThread;
 80003b6:	7abb      	ldrb	r3, [r7, #10]
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <Os_KernelStackInit+0x1a4>)
 80003bc:	801a      	strh	r2, [r3, #0]
    
    return Retval;
 80003be:	7afb      	ldrb	r3, [r7, #11]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000a0 	.word	0x200000a0
 80003cc:	200000a4 	.word	0x200000a4

080003d0 <Os_KernelInit>:
    Os_CurrentTCB = &Os_TCB[0];
}
#endif

void Os_KernelInit(uint32 quanta)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    MILLIS_PRESCALER = (BUS_DIV_8/1000);
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <Os_KernelInit+0x24>)
 80003da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003de:	601a      	str	r2, [r3, #0]
    Os_Quanta = quanta;
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <Os_KernelInit+0x28>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000098 	.word	0x20000098
 80003f8:	2000009c 	.word	0x2000009c

080003fc <Os_KernelLaunch>:

void Os_KernelLaunch(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    /* Disable timer to configure timer */
    SysTick->CSR &= ~(1 << SYSTICK_CSR_ENABLE_SHIFT);
 8000400:	4b13      	ldr	r3, [pc, #76]	; (8000450 <Os_KernelLaunch+0x54>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <Os_KernelLaunch+0x54>)
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	6013      	str	r3, [r2, #0]

    /* Configure clock source from processor */
    SysTick->CSR |= (SYSTICK_CSR_CLKSOURCE_EXTERNAL << SYSTICK_CSR_CLKSOURCE_SHIFT);
 800040c:	4b10      	ldr	r3, [pc, #64]	; (8000450 <Os_KernelLaunch+0x54>)
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <Os_KernelLaunch+0x54>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6013      	str	r3, [r2, #0]

    /* Enable interrupt request to  systick timer */
    SysTick->CSR |= (1 << SYSTICK_CSR_TICKINT_SHIFT);
 8000414:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <Os_KernelLaunch+0x54>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <Os_KernelLaunch+0x54>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6013      	str	r3, [r2, #0]

    /* Reload value [0:24] bits: max count value = 16,777,215 - 1 */
    SysTick->RVR = (Os_Quanta*MILLIS_PRESCALER - 1) & SYSTICK_CVR_CURRENT_MASK;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <Os_KernelLaunch+0x58>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <Os_KernelLaunch+0x5c>)
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	3b01      	subs	r3, #1
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <Os_KernelLaunch+0x54>)
 8000430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000434:	6053      	str	r3, [r2, #4]

    /* Clear current value */
    SysTick->CVR = 1;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <Os_KernelLaunch+0x54>)
 8000438:	2201      	movs	r2, #1
 800043a:	609a      	str	r2, [r3, #8]

    /* Enable timer to start timer*/
    SysTick->CSR |= (1 << SYSTICK_CSR_ENABLE_SHIFT);
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <Os_KernelLaunch+0x54>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <Os_KernelLaunch+0x54>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]

    // Os_PeriodicTaskInit();
	Os_SchedulerLaunch();
 8000448:	f7ff fec6 	bl	80001d8 <Os_SchedulerLaunch>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	e000e010 	.word	0xe000e010
 8000454:	2000009c 	.word	0x2000009c
 8000458:	20000098 	.word	0x20000098

0800045c <Os_ThreadYield>:

void Os_ThreadYield(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
    /* Clear current value */
    SysTick->CVR = 0;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <Os_ThreadYield+0x20>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
    
    /* Set pending systick event by software */
    ICSR |= (1 << ICSR_PENDSTSET_SHIFT);
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <Os_ThreadYield+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <Os_ThreadYield+0x24>)
 800046c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000470:	6013      	str	r3, [r2, #0]
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000e010 	.word	0xe000e010
 8000480:	e000ed04 	.word	0xe000ed04

08000484 <Os_SemaphoreInit>:

void Os_SemaphoreInit(Os_Semaphore *semaphore, uint32 value)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
	*semaphore = value;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	683a      	ldr	r2, [r7, #0]
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <Os_SemaphoreGive>:

void Os_SemaphoreGive(Os_Semaphore *semaphore)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	asm volatile("CPSID I");
 80004a8:	b672      	cpsid	i
	*semaphore +=1;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	601a      	str	r2, [r3, #0]
	asm volatile("CPSIE I");
 80004b4:	b662      	cpsie	i
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <Os_CooperativeWait>:
	asm volatile("CPSID I");
}


void Os_CooperativeWait(Os_Semaphore *semaphore)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	asm volatile("CPSID I");
 80004ca:	b672      	cpsid	i
	
	while(*semaphore <= 0){
 80004cc:	e003      	b.n	80004d6 <Os_CooperativeWait+0x14>
	    asm volatile("CPSIE I");
 80004ce:	b662      	cpsie	i
        Os_ThreadYield();
 80004d0:	f7ff ffc4 	bl	800045c <Os_ThreadYield>
	    asm volatile("CPSID I");
 80004d4:	b672      	cpsid	i
	while(*semaphore <= 0){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f7      	beq.n	80004ce <Os_CooperativeWait+0xc>
	}
	*semaphore -=1;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1e5a      	subs	r2, r3, #1
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	601a      	str	r2, [r3, #0]
	
	asm volatile("CPSID I");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <Os_SchedulerRoundRobin>:


void Os_SchedulerRoundRobin(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
#if(SOFTWARE_PERIODIC_THREAD_SUPPORT == STD_ON)
    Os_PeriTcbType *lpCurrentPeriTCB = Os_CurrentPeriTCB;
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <Os_SchedulerRoundRobin+0x50>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	607b      	str	r3, [r7, #4]
    while (lpCurrentPeriTCB != NULL_PTR)
 8000500:	e014      	b.n	800052c <Os_SchedulerRoundRobin+0x38>
    {
        /* Loop to check all periodic TCB if timeleft is zero */
        lpCurrentPeriTCB->TimeLeft -= Os_Quanta;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	68da      	ldr	r2, [r3, #12]
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <Os_SchedulerRoundRobin+0x54>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1ad2      	subs	r2, r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	60da      	str	r2, [r3, #12]
        if (lpCurrentPeriTCB->TimeLeft == OS_ZERO)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d106      	bne.n	8000526 <Os_SchedulerRoundRobin+0x32>
        {
            /* Call periodic task and update timeleft */
            lpCurrentPeriTCB->ThreadTask();
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4798      	blx	r3
            lpCurrentPeriTCB->TimeLeft = lpCurrentPeriTCB->Period;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60da      	str	r2, [r3, #12]
        }
        lpCurrentPeriTCB = lpCurrentPeriTCB->nextPtr;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	607b      	str	r3, [r7, #4]
    while (lpCurrentPeriTCB != NULL_PTR)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1e7      	bne.n	8000502 <Os_SchedulerRoundRobin+0xe>
    }
#endif
    Os_CurrentTCB = Os_CurrentTCB->nextPtr;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <Os_SchedulerRoundRobin+0x58>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <Os_SchedulerRoundRobin+0x58>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000a8 	.word	0x200000a8
 8000548:	2000009c 	.word	0x2000009c
 800054c:	200000a4 	.word	0x200000a4

08000550 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    ICSR |= (1 << ICSR_PENDSVSET_SHIFT);
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <SysTick_Handler+0x1c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <SysTick_Handler+0x1c>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed04 	.word	0xe000ed04

08000570 <Os_KernelAddPeriodicTask>:

Os_ReturnType Os_KernelAddPeriodicTask(uint32 NumOfPeriodicTask, ...)
{
 8000570:	b40f      	push	{r0, r1, r2, r3}
 8000572:	b590      	push	{r4, r7, lr}
 8000574:	b089      	sub	sp, #36	; 0x24
 8000576:	af00      	add	r7, sp, #0
    Os_ReturnType Retval = E_NOT_OK;
 8000578:	2301      	movs	r3, #1
 800057a:	77fb      	strb	r3, [r7, #31]
    Os_PeriTcbType *lpCurrentPeriTCB = NULL_PTR; 
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
    boolean lucPeriodCheck = OS_TRUE;
 8000580:	2301      	movs	r3, #1
 8000582:	75fb      	strb	r3, [r7, #23]

    /* Disable global exceptions */
    asm volatile("CPSID I");
 8000584:	b672      	cpsid	i

    /* Check not enough parameters */
    if (NumOfPeriodicTask % 2 == OS_ZERO)
 8000586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d154      	bne.n	800063a <Os_KernelAddPeriodicTask+0xca>
    {
        va_list argv;
        va_start(argv, NumOfPeriodicTask);
 8000590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000594:	607b      	str	r3, [r7, #4]

        for (uint32 idx = 0; idx < NumOfPeriodicTask/2; idx++)
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	e049      	b.n	8000630 <Os_KernelAddPeriodicTask+0xc0>
        {
            if (lucPeriodCheck == OS_TRUE)
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d143      	bne.n	800062a <Os_KernelAddPeriodicTask+0xba>
            {
                /* Assign task address to TCB */
                uint32 Task = va_arg(argv, uint32);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	1d1a      	adds	r2, r3, #4
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	60fb      	str	r3, [r7, #12]
                /* Assign time period to TCB */
                uint32 Period = va_arg(argv, uint32);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	1d1a      	adds	r2, r3, #4
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60bb      	str	r3, [r7, #8]
                
                if (Period % Os_Quanta)
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <Os_KernelAddPeriodicTask+0xfc>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c0:	fb01 f202 	mul.w	r2, r1, r2
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <Os_KernelAddPeriodicTask+0x60>
                {
                    lucPeriodCheck = OS_FALSE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	75fb      	strb	r3, [r7, #23]
                    continue;
 80005ce:	e02c      	b.n	800062a <Os_KernelAddPeriodicTask+0xba>
                }
                
                /* Connect Os_TCB to the next Os_TCB */
                if (Os_CurrentPeriTCB == NULL_PTR)
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10b      	bne.n	80005f0 <Os_KernelAddPeriodicTask+0x80>
                {                
                    Os_CurrentPeriTCB = (Os_PeriTcbType *)calloc(1, sizeof(Os_PeriTcbType));
 80005d8:	2110      	movs	r1, #16
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fe70 	bl	80012c0 <calloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 80005e6:	601a      	str	r2, [r3, #0]
                    lpCurrentPeriTCB = Os_CurrentPeriTCB;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	e00c      	b.n	800060a <Os_KernelAddPeriodicTask+0x9a>
                }
                else /* Os_CurrentPeriTCB == NULL_PTR */
                {
                    Os_CurrentPeriTCB->nextPtr = (Os_PeriTcbType *)calloc(1, sizeof(Os_PeriTcbType));
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 80005f2:	681c      	ldr	r4, [r3, #0]
 80005f4:	2110      	movs	r1, #16
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fe62 	bl	80012c0 <calloc>
 80005fc:	4603      	mov	r3, r0
 80005fe:	6023      	str	r3, [r4, #0]
                    Os_CurrentPeriTCB = Os_CurrentPeriTCB->nextPtr;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 8000608:	6013      	str	r3, [r2, #0]
                }
                
                /* Assign Thread information to TCB */
                Os_CurrentPeriTCB->ThreadTask = (void*)Task;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	605a      	str	r2, [r3, #4]
                Os_CurrentPeriTCB->Period = Period;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	609a      	str	r2, [r3, #8]
                Os_CurrentPeriTCB->TimeLeft = Period;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
                Os_CurrentPeriTCB->nextPtr = NULL_PTR;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
        for (uint32 idx = 0; idx < NumOfPeriodicTask/2; idx++)
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	3301      	adds	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3b0      	bcc.n	800059c <Os_KernelAddPeriodicTask+0x2c>
        }

        va_end(argv);
    }
    
    if (lucPeriodCheck != OS_FALSE)
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00a      	beq.n	8000656 <Os_KernelAddPeriodicTask+0xe6>
    {
        Retval = E_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	77fb      	strb	r3, [r7, #31]
        Os_NumOfPeriThread += NumOfPeriodicTask/2;
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	085b      	lsrs	r3, r3, #1
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <Os_KernelAddPeriodicTask+0x104>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <Os_KernelAddPeriodicTask+0x104>)
 8000654:	801a      	strh	r2, [r3, #0]
    }
    /* Init Os_CurrentTCB pointer to the first Os_TCB */
    Os_CurrentPeriTCB = lpCurrentPeriTCB;
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <Os_KernelAddPeriodicTask+0x100>)
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	6013      	str	r3, [r2, #0]
    
    return Retval;
 800065c:	7ffb      	ldrb	r3, [r7, #31]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3724      	adds	r7, #36	; 0x24
 8000662:	46bd      	mov	sp, r7
 8000664:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr
 800066c:	2000009c 	.word	0x2000009c
 8000670:	200000a8 	.word	0x200000a8
 8000674:	200000a2 	.word	0x200000a2

08000678 <GPIO_PeriClockControl>:
#include "gpio2.h"

void GPIO_PeriClockControl(GPIO_Type *pGPIOx, uint8 EnorDis)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE)
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d141      	bne.n	800070e <GPIO_PeriClockControl+0x96>
	{
		if (pGPIOx == GPIOA)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a45      	ldr	r2, [pc, #276]	; (80007a4 <GPIO_PeriClockControl+0x12c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0x28>
			PORTA_CLK_EN();
 8000692:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a44      	ldr	r2, [pc, #272]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOE)
			PORTE_CLK_DIS();
		else if (pGPIOx == GPIOH)
			PORTH_CLK_DIS();
	}
}
 800069e:	e07a      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOB)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <GPIO_PeriClockControl+0x134>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0x3e>
			PORTB_CLK_EN();
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a3e      	ldr	r2, [pc, #248]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b4:	e06f      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOC)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a3d      	ldr	r2, [pc, #244]	; (80007b0 <GPIO_PeriClockControl+0x138>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0x54>
			PORTC_CLK_EN();
 80006be:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a39      	ldr	r2, [pc, #228]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ca:	e064      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOD)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a39      	ldr	r2, [pc, #228]	; (80007b4 <GPIO_PeriClockControl+0x13c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <GPIO_PeriClockControl+0x6a>
			PORTD_CLK_EN();
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a33      	ldr	r2, [pc, #204]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e0:	e059      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOE)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <GPIO_PeriClockControl+0x140>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x80>
			PORTE_CLK_EN();
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f6:	e04e      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOH)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a30      	ldr	r2, [pc, #192]	; (80007bc <GPIO_PeriClockControl+0x144>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d14a      	bne.n	8000796 <GPIO_PeriClockControl+0x11e>
			PORTH_CLK_EN();
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070c:	e043      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
	else if (EnorDis == DISABLE)
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d140      	bne.n	8000796 <GPIO_PeriClockControl+0x11e>
		if (pGPIOx == GPIOA)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <GPIO_PeriClockControl+0x12c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClockControl+0xb2>
			PORTA_CLK_DIS();
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000728:	e035      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOB)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <GPIO_PeriClockControl+0x134>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockControl+0xc8>
			PORTB_CLK_DIS();
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000738:	f023 0302 	bic.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073e:	e02a      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOC)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <GPIO_PeriClockControl+0x138>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClockControl+0xde>
			PORTC_CLK_DIS();
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 800074e:	f023 0304 	bic.w	r3, r3, #4
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000754:	e01f      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOD)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <GPIO_PeriClockControl+0x13c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockControl+0xf4>
			PORTD_CLK_DIS();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000764:	f023 0308 	bic.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076a:	e014      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOE)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <GPIO_PeriClockControl+0x140>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d106      	bne.n	8000782 <GPIO_PeriClockControl+0x10a>
			PORTE_CLK_DIS();
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000780:	e009      	b.n	8000796 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOH)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <GPIO_PeriClockControl+0x144>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d105      	bne.n	8000796 <GPIO_PeriClockControl+0x11e>
			PORTH_CLK_DIS();
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <GPIO_PeriClockControl+0x130>)
 8000790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40021c00 	.word	0x40021c00

080007c0 <GPIO_Init>:

void GPIO_Init(GPIO_Handle_Type *pGPIOHandle)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32 temp = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	/*1. Configure the mode of gpio pin*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d822      	bhi.n	800081a <GPIO_Init+0x5a>
	{ /*non interrupt mode*/
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clearing bitfields*/
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	400a      	ands	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;														   /*setting bitfields*/
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e0a1      	b.n	800095e <GPIO_Init+0x19e>
	}
	else
	{ /*interrupt mode*/
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d117      	bne.n	8000852 <GPIO_Init+0x92>
		{
			/*1. Configure falling edge selection*/
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000822:	4b9f      	ldr	r3, [pc, #636]	; (8000aa0 <GPIO_Init+0x2e0>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	7912      	ldrb	r2, [r2, #4]
 800082a:	4611      	mov	r1, r2
 800082c:	2201      	movs	r2, #1
 800082e:	408a      	lsls	r2, r1
 8000830:	4611      	mov	r1, r2
 8000832:	4a9b      	ldr	r2, [pc, #620]	; (8000aa0 <GPIO_Init+0x2e0>)
 8000834:	430b      	orrs	r3, r1
 8000836:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000838:	4b99      	ldr	r3, [pc, #612]	; (8000aa0 <GPIO_Init+0x2e0>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	7912      	ldrb	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	2201      	movs	r2, #1
 8000844:	408a      	lsls	r2, r1
 8000846:	43d2      	mvns	r2, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a95      	ldr	r2, [pc, #596]	; (8000aa0 <GPIO_Init+0x2e0>)
 800084c:	400b      	ands	r3, r1
 800084e:	6093      	str	r3, [r2, #8]
 8000850:	e035      	b.n	80008be <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d117      	bne.n	800088a <GPIO_Init+0xca>
		{
			/*1. Configure rising edge selection*/
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800085a:	4b91      	ldr	r3, [pc, #580]	; (8000aa0 <GPIO_Init+0x2e0>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	7912      	ldrb	r2, [r2, #4]
 8000862:	4611      	mov	r1, r2
 8000864:	2201      	movs	r2, #1
 8000866:	408a      	lsls	r2, r1
 8000868:	43d2      	mvns	r2, r2
 800086a:	4611      	mov	r1, r2
 800086c:	4a8c      	ldr	r2, [pc, #560]	; (8000aa0 <GPIO_Init+0x2e0>)
 800086e:	400b      	ands	r3, r1
 8000870:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000872:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <GPIO_Init+0x2e0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	7912      	ldrb	r2, [r2, #4]
 800087a:	4611      	mov	r1, r2
 800087c:	2201      	movs	r2, #1
 800087e:	408a      	lsls	r2, r1
 8000880:	4611      	mov	r1, r2
 8000882:	4a87      	ldr	r2, [pc, #540]	; (8000aa0 <GPIO_Init+0x2e0>)
 8000884:	430b      	orrs	r3, r1
 8000886:	6093      	str	r3, [r2, #8]
 8000888:	e019      	b.n	80008be <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_EE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	795b      	ldrb	r3, [r3, #5]
 800088e:	2b06      	cmp	r3, #6
 8000890:	d115      	bne.n	80008be <GPIO_Init+0xfe>
		{
			/*1. Configure either edge selection*/
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000892:	4b83      	ldr	r3, [pc, #524]	; (8000aa0 <GPIO_Init+0x2e0>)
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	7912      	ldrb	r2, [r2, #4]
 800089a:	4611      	mov	r1, r2
 800089c:	2201      	movs	r2, #1
 800089e:	408a      	lsls	r2, r1
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <GPIO_Init+0x2e0>)
 80008a4:	430b      	orrs	r3, r1
 80008a6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a8:	4b7d      	ldr	r3, [pc, #500]	; (8000aa0 <GPIO_Init+0x2e0>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	7912      	ldrb	r2, [r2, #4]
 80008b0:	4611      	mov	r1, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	408a      	lsls	r2, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a79      	ldr	r2, [pc, #484]	; (8000aa0 <GPIO_Init+0x2e0>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6093      	str	r3, [r2, #8]
		}

		/*2. Configure the GPIO port selection in SYSCFG_EXTICR*/
		uint8 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	74fb      	strb	r3, [r7, #19]
		uint8 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	74bb      	strb	r3, [r7, #18]
		uint8 portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a73      	ldr	r2, [pc, #460]	; (8000aa4 <GPIO_Init+0x2e4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d024      	beq.n	8000924 <GPIO_Init+0x164>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a72      	ldr	r2, [pc, #456]	; (8000aa8 <GPIO_Init+0x2e8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d01d      	beq.n	8000920 <GPIO_Init+0x160>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a70      	ldr	r2, [pc, #448]	; (8000aac <GPIO_Init+0x2ec>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d016      	beq.n	800091c <GPIO_Init+0x15c>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a6f      	ldr	r2, [pc, #444]	; (8000ab0 <GPIO_Init+0x2f0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d00f      	beq.n	8000918 <GPIO_Init+0x158>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a6d      	ldr	r2, [pc, #436]	; (8000ab4 <GPIO_Init+0x2f4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d008      	beq.n	8000914 <GPIO_Init+0x154>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a6c      	ldr	r2, [pc, #432]	; (8000ab8 <GPIO_Init+0x2f8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d101      	bne.n	8000910 <GPIO_Init+0x150>
 800090c:	2305      	movs	r3, #5
 800090e:	e00a      	b.n	8000926 <GPIO_Init+0x166>
 8000910:	2300      	movs	r3, #0
 8000912:	e008      	b.n	8000926 <GPIO_Init+0x166>
 8000914:	2304      	movs	r3, #4
 8000916:	e006      	b.n	8000926 <GPIO_Init+0x166>
 8000918:	2303      	movs	r3, #3
 800091a:	e004      	b.n	8000926 <GPIO_Init+0x166>
 800091c:	2302      	movs	r3, #2
 800091e:	e002      	b.n	8000926 <GPIO_Init+0x166>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <GPIO_Init+0x166>
 8000924:	2300      	movs	r3, #0
 8000926:	747b      	strb	r3, [r7, #17]
		SYSCFG_CLK_EN();
 8000928:	4b64      	ldr	r3, [pc, #400]	; (8000abc <GPIO_Init+0x2fc>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	4a63      	ldr	r2, [pc, #396]	; (8000abc <GPIO_Init+0x2fc>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000934:	7c7a      	ldrb	r2, [r7, #17]
 8000936:	7cbb      	ldrb	r3, [r7, #18]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	fa02 f103 	lsl.w	r1, r2, r3
 800093e:	4a60      	ldr	r2, [pc, #384]	; (8000ac0 <GPIO_Init+0x300>)
 8000940:	7cfb      	ldrb	r3, [r7, #19]
 8000942:	3302      	adds	r3, #2
 8000944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*3. Enable the EXTI interrupt delivery using IMR*/
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <GPIO_Init+0x2e0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7912      	ldrb	r2, [r2, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	2201      	movs	r2, #1
 8000954:	408a      	lsls	r2, r1
 8000956:	4611      	mov	r1, r2
 8000958:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <GPIO_Init+0x2e0>)
 800095a:	430b      	orrs	r3, r1
 800095c:	6013      	str	r3, [r2, #0]
	}
	/*2. Configure the speed*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	799b      	ldrb	r3, [r3, #6]
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clearing bitfields*/
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2103      	movs	r1, #3
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	4619      	mov	r1, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	400a      	ands	r2, r1
 800098c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;														 /*setting bitfields*/
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6899      	ldr	r1, [r3, #8]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	430a      	orrs	r2, r1
 800099c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]

	/*3. Configure the pupd setting*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	79db      	ldrb	r3, [r3, #7]
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clearing bitfields*/
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2103      	movs	r1, #3
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	400a      	ands	r2, r1
 80009d0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;														   /*setting bitfields*/
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	68d9      	ldr	r1, [r3, #12]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	430a      	orrs	r2, r1
 80009e0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]

	/*4. Configure the optype*/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7a1b      	ldrb	r3, [r3, #8]
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*clearing bitfields*/
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	4619      	mov	r1, r3
 8000a02:	2301      	movs	r3, #1
 8000a04:	408b      	lsls	r3, r1
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;													/*setting bitfields*/
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]

	/*5. Configure the alt function*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	795b      	ldrb	r3, [r3, #5]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d131      	bne.n	8000a92 <GPIO_Init+0x2d2>
	{
		uint8 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	743b      	strb	r3, [r7, #16]
		uint8 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp2] &= ~(0x0F << (4 * temp1));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	3208      	adds	r2, #8
 8000a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a4c:	7c3b      	ldrb	r3, [r7, #16]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	220f      	movs	r2, #15
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	4001      	ands	r1, r0
 8000a62:	3208      	adds	r2, #8
 8000a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp2] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp1));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	3208      	adds	r2, #8
 8000a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7a5b      	ldrb	r3, [r3, #9]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	7c3b      	ldrb	r3, [r7, #16]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	4301      	orrs	r1, r0
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40013c00 	.word	0x40013c00
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <RCC_GetPLLValue>:

static uint16 AHB_prescaler[9] = {2, 4, 8, 16, 32, 64, 128, 256, 512};
static uint8 APB_prescaler[4] = {2, 4, 8, 16};

uint32 RCC_GetPLLValue(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
    return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <RCC_GetPCLK1Value>:

uint32 RCC_GetPCLK1Value(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
    uint8 tempsws, tempAHB, tempAPB1;
    uint16 tempAHBPre, tempAPB1Pre;
    uint32 tempclk;

    tempsws = (RCC->CFGR >> 2) & 0X3;
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <RCC_GetPCLK1Value+0xa8>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	71fb      	strb	r3, [r7, #7]
    if (tempsws == 0)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <RCC_GetPCLK1Value+0x20>
    {
        tempclk = 16000000;
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <RCC_GetPCLK1Value+0xac>)
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e00b      	b.n	8000b0c <RCC_GetPCLK1Value+0x38>
    }
    else if (tempsws == 1)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d102      	bne.n	8000b00 <RCC_GetPCLK1Value+0x2c>
    {
        tempclk = 8000000;
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <RCC_GetPCLK1Value+0xb0>)
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	e005      	b.n	8000b0c <RCC_GetPCLK1Value+0x38>
    }
    else if (tempsws == 2)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d102      	bne.n	8000b0c <RCC_GetPCLK1Value+0x38>
    {
        tempclk = RCC_GetPLLValue();
 8000b06:	f7ff ffdd 	bl	8000ac4 <RCC_GetPLLValue>
 8000b0a:	60b8      	str	r0, [r7, #8]
    }

    tempAHB = (RCC->CFGR >> 4) & 0XF;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <RCC_GetPCLK1Value+0xa8>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f003 030f 	and.w	r3, r3, #15
 8000b18:	71bb      	strb	r3, [r7, #6]
    if (tempAHB < 8)
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d802      	bhi.n	8000b26 <RCC_GetPCLK1Value+0x52>
    {
        tempAHBPre = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	81fb      	strh	r3, [r7, #14]
 8000b24:	e008      	b.n	8000b38 <RCC_GetPCLK1Value+0x64>
    }
    else if (tempAHB >= 8)
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d905      	bls.n	8000b38 <RCC_GetPCLK1Value+0x64>
    {
        tempAHBPre = AHB_prescaler[tempAHB - 8];
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <RCC_GetPCLK1Value+0xb4>)
 8000b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b36:	81fb      	strh	r3, [r7, #14]
    }

    tempAPB1 = (RCC->CFGR >> 10) & 0X7;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <RCC_GetPCLK1Value+0xa8>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	0a9b      	lsrs	r3, r3, #10
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	717b      	strb	r3, [r7, #5]
    if (tempAPB1 < 4)
 8000b46:	797b      	ldrb	r3, [r7, #5]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d802      	bhi.n	8000b52 <RCC_GetPCLK1Value+0x7e>
    {
        tempAPB1Pre = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	81bb      	strh	r3, [r7, #12]
 8000b50:	e007      	b.n	8000b62 <RCC_GetPCLK1Value+0x8e>
    }
    else if (tempAPB1 >= 4)
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d904      	bls.n	8000b62 <RCC_GetPCLK1Value+0x8e>
    {
        tempAPB1Pre = APB_prescaler[tempAPB1 - 4];
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <RCC_GetPCLK1Value+0xb8>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	81bb      	strh	r3, [r7, #12]
    }

    tempclk = (tempclk / tempAHBPre) / tempAPB1Pre;
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b6a:	89bb      	ldrh	r3, [r7, #12]
 8000b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b70:	60bb      	str	r3, [r7, #8]
    return tempclk;
 8000b72:	68bb      	ldr	r3, [r7, #8]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000014 	.word	0x20000014

08000b90 <RCC_GetPCLK2Value>:

uint32 RCC_GetPCLK2Value(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
    uint8 tempsws, tempAHB, tempAPB2;
    uint16 tempAHBPre, tempAPB2Pre;
    uint32 tempclk;

    tempsws = (RCC->CFGR >> 2) & 0X3;
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <RCC_GetPCLK2Value+0xa8>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	71fb      	strb	r3, [r7, #7]
    if (tempsws == 0)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <RCC_GetPCLK2Value+0x20>
    {
        tempclk = 16000000;
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <RCC_GetPCLK2Value+0xac>)
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	e00b      	b.n	8000bc8 <RCC_GetPCLK2Value+0x38>
    }
    else if (tempsws == 1)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d102      	bne.n	8000bbc <RCC_GetPCLK2Value+0x2c>
    {
        tempclk = 8000000;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <RCC_GetPCLK2Value+0xb0>)
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	e005      	b.n	8000bc8 <RCC_GetPCLK2Value+0x38>
    }
    else if (tempsws == 2)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d102      	bne.n	8000bc8 <RCC_GetPCLK2Value+0x38>
    {
        tempclk = RCC_GetPLLValue();
 8000bc2:	f7ff ff7f 	bl	8000ac4 <RCC_GetPLLValue>
 8000bc6:	60b8      	str	r0, [r7, #8]
    }

    tempAHB = (RCC->CFGR >> 4) & 0XF;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <RCC_GetPCLK2Value+0xa8>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	71bb      	strb	r3, [r7, #6]
    if (tempAHB < 8)
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d802      	bhi.n	8000be2 <RCC_GetPCLK2Value+0x52>
    {
        tempAHBPre = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	81fb      	strh	r3, [r7, #14]
 8000be0:	e008      	b.n	8000bf4 <RCC_GetPCLK2Value+0x64>
    }
    else if (tempAHB >= 8)
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d905      	bls.n	8000bf4 <RCC_GetPCLK2Value+0x64>
    {
        tempAHBPre = AHB_prescaler[tempAHB - 8];
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	3b08      	subs	r3, #8
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <RCC_GetPCLK2Value+0xb4>)
 8000bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf2:	81fb      	strh	r3, [r7, #14]
    }

    tempAPB2 = (RCC->CFGR >> 13) & 0X7;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <RCC_GetPCLK2Value+0xa8>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	0b5b      	lsrs	r3, r3, #13
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	717b      	strb	r3, [r7, #5]
    if (tempAPB2 < 4)
 8000c02:	797b      	ldrb	r3, [r7, #5]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d802      	bhi.n	8000c0e <RCC_GetPCLK2Value+0x7e>
    {
        tempAPB2Pre = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	81bb      	strh	r3, [r7, #12]
 8000c0c:	e007      	b.n	8000c1e <RCC_GetPCLK2Value+0x8e>
    }
    else if (tempAPB2 >= 4)
 8000c0e:	797b      	ldrb	r3, [r7, #5]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d904      	bls.n	8000c1e <RCC_GetPCLK2Value+0x8e>
    {
        tempAPB2Pre = APB_prescaler[tempAPB2 - 4];
 8000c14:	797b      	ldrb	r3, [r7, #5]
 8000c16:	3b04      	subs	r3, #4
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <RCC_GetPCLK2Value+0xb8>)
 8000c1a:	5cd3      	ldrb	r3, [r2, r3]
 8000c1c:	81bb      	strh	r3, [r7, #12]
    }

    tempclk = (tempclk / tempAHBPre) / tempAPB2Pre;
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	60bb      	str	r3, [r7, #8]
    return tempclk;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	00f42400 	.word	0x00f42400
 8000c40:	007a1200 	.word	0x007a1200
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000014 	.word	0x20000014

08000c4c <USART_PeriClockControl>:

/******************************************************************************
 *  GLOBAL FUNCTION
 *****************************************************************************/
void USART_PeriClockControl(USART_Type *pUSARTx, uint8 EnorDis)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
    if (EnorDis == ENABLE)
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d120      	bne.n	8000ca0 <USART_PeriClockControl+0x54>
    {
        if (pUSARTx == USART1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a24      	ldr	r2, [pc, #144]	; (8000cf4 <USART_PeriClockControl+0xa8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <USART_PeriClockControl+0x28>
            USART1_CLK_EN();
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
        else if (pUSARTx == USART2)
            USART2_CLK_DIS();
        else if (pUSARTx == USART6)
            USART6_CLK_DIS();
    }
}
 8000c72:	e038      	b.n	8000ce6 <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <USART_PeriClockControl+0xb0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d106      	bne.n	8000c8a <USART_PeriClockControl+0x3e>
            USART2_CLK_EN();
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c88:	e02d      	b.n	8000ce6 <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART6)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <USART_PeriClockControl+0xb4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d129      	bne.n	8000ce6 <USART_PeriClockControl+0x9a>
            USART6_CLK_EN();
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c9e:	e022      	b.n	8000ce6 <USART_PeriClockControl+0x9a>
    else if (EnorDis == DISABLE)
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d11f      	bne.n	8000ce6 <USART_PeriClockControl+0x9a>
        if (pUSARTx == USART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <USART_PeriClockControl+0xa8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d106      	bne.n	8000cbc <USART_PeriClockControl+0x70>
            USART1_CLK_DIS();
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000cb4:	f023 0310 	bic.w	r3, r3, #16
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000cba:	e014      	b.n	8000ce6 <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <USART_PeriClockControl+0xb0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <USART_PeriClockControl+0x86>
            USART2_CLK_DIS();
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000cca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cd0:	e009      	b.n	8000ce6 <USART_PeriClockControl+0x9a>
        else if (pUSARTx == USART6)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <USART_PeriClockControl+0xb4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d105      	bne.n	8000ce6 <USART_PeriClockControl+0x9a>
            USART6_CLK_DIS();
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <USART_PeriClockControl+0xac>)
 8000ce0:	f023 0320 	bic.w	r3, r3, #32
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40011400 	.word	0x40011400

08000d04 <USART_Init>:

void USART_Init(USART_Handle_Type *pUSARTHandle)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    // Temporary variable
    uint32 tempreg = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]

    /******************************** Configuration of CR1******************************************/

    // Implement the code to enable the Clock for given USART peripheral
    if (pUSARTHandle->pUSARTx == USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a51      	ldr	r2, [pc, #324]	; (8000e5c <USART_Init+0x158>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <USART_Init+0x24>
    {
        USART1_CLK_EN();
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <USART_Init+0x15c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <USART_Init+0x15c>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	e016      	b.n	8000d56 <USART_Init+0x52>
    }
    else if (pUSARTHandle->pUSARTx == USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <USART_Init+0x160>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d106      	bne.n	8000d40 <USART_Init+0x3c>
    {
        USART2_CLK_EN();
 8000d32:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <USART_Init+0x15c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <USART_Init+0x15c>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	e00a      	b.n	8000d56 <USART_Init+0x52>
    }
    else if (pUSARTHandle->pUSARTx == USART6)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <USART_Init+0x164>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d105      	bne.n	8000d56 <USART_Init+0x52>
    {
        USART6_CLK_EN();
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <USART_Init+0x15c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a44      	ldr	r2, [pc, #272]	; (8000e60 <USART_Init+0x15c>)
 8000d50:	f043 0320 	orr.w	r3, r3, #32
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
    }

    // Enable USART Tx and Rx engines according to the USART_Mode configuration item
    if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d104      	bne.n	8000d68 <USART_Init+0x64>
    {
        // Implement the code to enable the Receiver bit field
        tempreg |= (1 << USART_CR1_RE_SHIFT);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e010      	b.n	8000d8a <USART_Init+0x86>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d104      	bne.n	8000d7a <USART_Init+0x76>
    {
        // Implement the code to enable the Transmitter bit field
        tempreg |= (1 << USART_CR1_TE_SHIFT);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e007      	b.n	8000d8a <USART_Init+0x86>
    }
    else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d103      	bne.n	8000d8a <USART_Init+0x86>
    {
        // Implement the code to enable the both Transmitter and Receiver bit fields
        tempreg |= ((1 << USART_CR1_TE_SHIFT) | (1 << USART_CR1_RE_SHIFT));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f043 030c 	orr.w	r3, r3, #12
 8000d88:	60fb      	str	r3, [r7, #12]
    }

    // Implement the code to configure the Word length configuration item
    tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M_SHIFT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7b5b      	ldrb	r3, [r3, #13]
 8000d8e:	031b      	lsls	r3, r3, #12
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    // Configuration of parity control bit fields
    if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7b9b      	ldrb	r3, [r3, #14]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d108      	bne.n	8000db2 <USART_Init+0xae>
    {
        // Implement the code to enale the parity control
        tempreg |= (1 << USART_CR1_PCE_SHIFT);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	60fb      	str	r3, [r7, #12]

        // Implement the code to enable EVEN parity
        tempreg &= ~(1 << USART_CR1_PS_SHIFT);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e00b      	b.n	8000dca <USART_Init+0xc6>

        // Not required because by default EVEN parity will be selected once you enable the parity control
    }
    else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7b9b      	ldrb	r3, [r3, #14]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d107      	bne.n	8000dca <USART_Init+0xc6>
    {
        // Implement the code to enable the parity control
        tempreg |= (1 << USART_CR1_PCE_SHIFT);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc0:	60fb      	str	r3, [r7, #12]

        // Implement the code to enable ODD parity
        tempreg |= (1 << USART_CR1_PS_SHIFT);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc8:	60fb      	str	r3, [r7, #12]
    }

    // Program the CR1 register
    pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	60da      	str	r2, [r3, #12]

    /******************************** Configuration of CR2******************************************/

    tempreg = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]

    // Implement the code to configure the number of stop bits inserted during USART frame transmission
    tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP_SHIFT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7b1b      	ldrb	r3, [r3, #12]
 8000dda:	031b      	lsls	r3, r3, #12
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    // Program the CR2 register
    pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	611a      	str	r2, [r3, #16]

    /******************************** Configuration of CR3******************************************/

    tempreg = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

    // Configuration of USART hardware flow control
    if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7bdb      	ldrb	r3, [r3, #15]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d104      	bne.n	8000e02 <USART_Init+0xfe>
    {
        // Implement the code to enable CTS flow control
        tempreg |= (1 << USART_CR3_CTSE_SHIFT);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	e010      	b.n	8000e24 <USART_Init+0x120>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7bdb      	ldrb	r3, [r3, #15]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d104      	bne.n	8000e14 <USART_Init+0x110>
    {
        // Implement the code to enable RTS flow control
        tempreg |= (1 << USART_CR3_RTSE_SHIFT);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	e007      	b.n	8000e24 <USART_Init+0x120>
    }
    else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7bdb      	ldrb	r3, [r3, #15]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d103      	bne.n	8000e24 <USART_Init+0x120>
    {
        // Implement the code to enable both CTS and RTS Flow control
        tempreg |= ((1 << USART_CR3_CTSE_SHIFT) | (1 << USART_CR3_RTSE_SHIFT));
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e22:	60fb      	str	r3, [r7, #12]
    }

    pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	615a      	str	r2, [r3, #20]

    /* Clear pointer to RX buffer */
    pUSARTHandle->pRxBuffer = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
    /* Clear pointer to TX buffer */
    pUSARTHandle->pTxBuffer = NULL;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]

    /* Clear RX bus state */
    pUSARTHandle->RxStatus = USART_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	765a      	strb	r2, [r3, #25]
    /* Clear TX bus state */
    pUSARTHandle->TxStatus = USART_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	761a      	strb	r2, [r3, #24]

    /* Clear RX buffer length */
    pUSARTHandle->RxLen = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
    /* Clear TX buffer length */
    pUSARTHandle->TxLen = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40011400 	.word	0x40011400

08000e6c <USART_SetBaudRate>:

void USART_SetBaudRate(USART_Handle_Type *pUSARTHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    uint32_t usartdiv;

    // variables to hold Mantissa and Fraction values
    uint32_t M_part, F_part;

    uint32_t tempreg = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]

    // Get the value of APB bus clock in to the variable PCLKx
    if (pUSARTHandle->pUSARTx == USART1 || pUSARTHandle->pUSARTx == USART6)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <USART_SetBaudRate+0xf4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d004      	beq.n	8000e8c <USART_SetBaudRate+0x20>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a37      	ldr	r2, [pc, #220]	; (8000f64 <USART_SetBaudRate+0xf8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d103      	bne.n	8000e94 <USART_SetBaudRate+0x28>
    {
        // USART1 and USART6 are hanging on APB2 bus
        PCLKx = RCC_GetPCLK2Value();
 8000e8c:	f7ff fe80 	bl	8000b90 <RCC_GetPCLK2Value>
 8000e90:	61f8      	str	r0, [r7, #28]
 8000e92:	e002      	b.n	8000e9a <USART_SetBaudRate+0x2e>
    }
    else
    {
        PCLKx = RCC_GetPCLK1Value();
 8000e94:	f7ff fe1e 	bl	8000ad4 <RCC_GetPCLK1Value>
 8000e98:	61f8      	str	r0, [r7, #28]
    }

    // Check for OVER8 configuration bit
    if (pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_OVER8_SHIFT))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00c      	beq.n	8000ec2 <USART_SetBaudRate+0x56>
    {
        // OVER8 = 1 , over sampling by 8
        usartdiv = ((25 * PCLKx) / (2 * pUSARTHandle->USART_Config.USART_Baud));
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009a      	lsls	r2, r3, #2
 8000eb2:	441a      	add	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	e00b      	b.n	8000eda <USART_SetBaudRate+0x6e>
    }
    else
    {
        // over sampling by 16
        usartdiv = ((25 * PCLKx) / (4 * pUSARTHandle->USART_Config.USART_Baud));
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	009a      	lsls	r2, r3, #2
 8000ecc:	441a      	add	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed8:	61bb      	str	r3, [r7, #24]
    }

    // Calculate the Mantissa part
    M_part = usartdiv / 100;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <USART_SetBaudRate+0xfc>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	60fb      	str	r3, [r7, #12]

    // Place the Mantissa part in appropriate bit position . refer USART_BRR
    tempreg |= M_part << 4;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    // Extract the fraction part
    F_part = (usartdiv - (M_part * 100));
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2264      	movs	r2, #100	; 0x64
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]

    // Calculate the final fractional
    if (pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_OVER8_SHIFT))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00a      	beq.n	8000f22 <USART_SetBaudRate+0xb6>
    {
        // OVER8 = 1 , over sampling by 8
        F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	3332      	adds	r3, #50	; 0x32
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <USART_SetBaudRate+0xfc>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e009      	b.n	8000f36 <USART_SetBaudRate+0xca>
    }
    else
    {
        // over sampling by 16
        F_part = (((F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	3332      	adds	r3, #50	; 0x32
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <USART_SetBaudRate+0xfc>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	617b      	str	r3, [r7, #20]
    }

    // Place the fractional part in appropriate bit position . refer USART_BRR
    tempreg |= F_part;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]

    // copy the value of tempreg in to BRR register
    pUSARTHandle->pUSARTx->BRR = tempreg;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	609a      	str	r2, [r3, #8]

    // Enable USART
    pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_UE_SHIFT);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f54:	60da      	str	r2, [r3, #12]
}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40011400 	.word	0x40011400
 8000f68:	51eb851f 	.word	0x51eb851f

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f000 f998 	bl	80012d0 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	20000148 	.word	0x20000148

08000fd8 <ThreadTask>:
{
	return a + b;
}

void ThreadTask(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	while(1)
	{
		Os_CooperativeWait(&semaphore);
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <ThreadTask+0x1c>)
 8000fde:	f7ff fa70 	bl	80004c2 <Os_CooperativeWait>
		a++;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <ThreadTask+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <ThreadTask+0x20>)
 8000fea:	6013      	str	r3, [r2, #0]
//		USART_Write(&Usart2, (uint8*)"Hello_world1_!!!\n\r", 18);
		Os_SemaphoreGive(&semaphore);
 8000fec:	4801      	ldr	r0, [pc, #4]	; (8000ff4 <ThreadTask+0x1c>)
 8000fee:	f7ff fa57 	bl	80004a0 <Os_SemaphoreGive>
		Os_CooperativeWait(&semaphore);
 8000ff2:	e7f3      	b.n	8000fdc <ThreadTask+0x4>
 8000ff4:	2000011c 	.word	0x2000011c
 8000ff8:	20000120 	.word	0x20000120

08000ffc <ThreadTask2>:
	}
}
void ThreadTask2(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	while(1)
	{
		Os_CooperativeWait(&semaphore);
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <ThreadTask2+0x1c>)
 8001002:	f7ff fa5e 	bl	80004c2 <Os_CooperativeWait>
		b++;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <ThreadTask2+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <ThreadTask2+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
//		USART_Write(&Usart2, (uint8*)"Hello_world2_!!!\n\r", 18);
		Os_SemaphoreGive(&semaphore);
 8001010:	4801      	ldr	r0, [pc, #4]	; (8001018 <ThreadTask2+0x1c>)
 8001012:	f7ff fa45 	bl	80004a0 <Os_SemaphoreGive>
		Os_CooperativeWait(&semaphore);
 8001016:	e7f3      	b.n	8001000 <ThreadTask2+0x4>
 8001018:	2000011c 	.word	0x2000011c
 800101c:	20000124 	.word	0x20000124

08001020 <ThreadTask3>:
	}
}
void ThreadTask3(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	while(1)
	{
		Os_CooperativeWait(&semaphore);
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <ThreadTask3+0x1c>)
 8001026:	f7ff fa4c 	bl	80004c2 <Os_CooperativeWait>
		c++;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <ThreadTask3+0x20>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <ThreadTask3+0x20>)
 8001032:	6013      	str	r3, [r2, #0]
//		USART_Write(&Usart2, (uint8*)"Hello_world3_!!!\n\r", 18);
		Os_SemaphoreGive(&semaphore);
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <ThreadTask3+0x1c>)
 8001036:	f7ff fa33 	bl	80004a0 <Os_SemaphoreGive>
		Os_CooperativeWait(&semaphore);
 800103a:	e7f3      	b.n	8001024 <ThreadTask3+0x4>
 800103c:	2000011c 	.word	0x2000011c
 8001040:	20000128 	.word	0x20000128

08001044 <ThreadTask4>:
	}
}

void ThreadTask4(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
		d++;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <ThreadTask4+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <ThreadTask4+0x18>)
 8001050:	6013      	str	r3, [r2, #0]
//		USART_Write(&Usart2, (uint8*)"Hello_world3_!!!\n\r", 18);
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	2000012c 	.word	0x2000012c

08001060 <ThreadTask5>:

void ThreadTask5(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
		e++;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <ThreadTask5+0x18>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a03      	ldr	r2, [pc, #12]	; (8001078 <ThreadTask5+0x18>)
 800106c:	6013      	str	r3, [r2, #0]
//		USART_Write(&Usart2, (uint8*)"Hello_world3_!!!\n\r", 18);
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000130 	.word	0x20000130

0800107c <main>:
}
/****************************************************************/
/*  MAIN FUNCTION	                                            */
/****************************************************************/
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af02      	add	r7, sp, #8
	Led.pGPIOx = GPIOD;
 8001082:	4b64      	ldr	r3, [pc, #400]	; (8001214 <main+0x198>)
 8001084:	4a64      	ldr	r2, [pc, #400]	; (8001218 <main+0x19c>)
 8001086:	601a      	str	r2, [r3, #0]
	Led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001088:	4b62      	ldr	r3, [pc, #392]	; (8001214 <main+0x198>)
 800108a:	2201      	movs	r2, #1
 800108c:	715a      	strb	r2, [r3, #5]
	Led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(12);
 800108e:	4b61      	ldr	r3, [pc, #388]	; (8001214 <main+0x198>)
 8001090:	220c      	movs	r2, #12
 8001092:	711a      	strb	r2, [r3, #4]
	Led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001094:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <main+0x198>)
 8001096:	2202      	movs	r2, #2
 8001098:	719a      	strb	r2, [r3, #6]
	Led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <main+0x198>)
 800109c:	2200      	movs	r2, #0
 800109e:	721a      	strb	r2, [r3, #8]
	Led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010a0:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <main+0x198>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	71da      	strb	r2, [r3, #7]

	Led2.pGPIOx = GPIOD;
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <main+0x1a0>)
 80010a8:	4a5b      	ldr	r2, [pc, #364]	; (8001218 <main+0x19c>)
 80010aa:	601a      	str	r2, [r3, #0]
	Led2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010ac:	4b5b      	ldr	r3, [pc, #364]	; (800121c <main+0x1a0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	715a      	strb	r2, [r3, #5]
	Led2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(13);
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <main+0x1a0>)
 80010b4:	220d      	movs	r2, #13
 80010b6:	711a      	strb	r2, [r3, #4]
	Led2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80010b8:	4b58      	ldr	r3, [pc, #352]	; (800121c <main+0x1a0>)
 80010ba:	2202      	movs	r2, #2
 80010bc:	719a      	strb	r2, [r3, #6]
	Led2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <main+0x1a0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	721a      	strb	r2, [r3, #8]
	Led2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <main+0x1a0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	71da      	strb	r2, [r3, #7]

	Led3.pGPIOx = GPIOD;
 80010ca:	4b55      	ldr	r3, [pc, #340]	; (8001220 <main+0x1a4>)
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <main+0x19c>)
 80010ce:	601a      	str	r2, [r3, #0]
	Led3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010d0:	4b53      	ldr	r3, [pc, #332]	; (8001220 <main+0x1a4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	715a      	strb	r2, [r3, #5]
	Led3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(15);
 80010d6:	4b52      	ldr	r3, [pc, #328]	; (8001220 <main+0x1a4>)
 80010d8:	220f      	movs	r2, #15
 80010da:	711a      	strb	r2, [r3, #4]
	Led3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <main+0x1a4>)
 80010de:	2202      	movs	r2, #2
 80010e0:	719a      	strb	r2, [r3, #6]
	Led3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <main+0x1a4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	721a      	strb	r2, [r3, #8]
	Led3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <main+0x1a4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	71da      	strb	r2, [r3, #7]

	Led4.pGPIOx = GPIOD;
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <main+0x1a8>)
 80010f0:	4a49      	ldr	r2, [pc, #292]	; (8001218 <main+0x19c>)
 80010f2:	601a      	str	r2, [r3, #0]
	Led4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <main+0x1a8>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	715a      	strb	r2, [r3, #5]
	Led4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(14);
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <main+0x1a8>)
 80010fc:	220e      	movs	r2, #14
 80010fe:	711a      	strb	r2, [r3, #4]
	Led4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <main+0x1a8>)
 8001102:	2202      	movs	r2, #2
 8001104:	719a      	strb	r2, [r3, #6]
	Led4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <main+0x1a8>)
 8001108:	2200      	movs	r2, #0
 800110a:	721a      	strb	r2, [r3, #8]
	Led4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <main+0x1a8>)
 800110e:	2200      	movs	r2, #0
 8001110:	71da      	strb	r2, [r3, #7]
	
	Usart2.pUSARTx = USART2;
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <main+0x1ac>)
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <main+0x1b0>)
 8001116:	601a      	str	r2, [r3, #0]
	Usart2.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <main+0x1ac>)
 800111a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800111e:	609a      	str	r2, [r3, #8]
	Usart2.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <main+0x1ac>)
 8001122:	2200      	movs	r2, #0
 8001124:	73da      	strb	r2, [r3, #15]
	Usart2.USART_Config.USART_Mode = USART_MODE_TXRX;
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <main+0x1ac>)
 8001128:	2202      	movs	r2, #2
 800112a:	711a      	strb	r2, [r3, #4]
	Usart2.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <main+0x1ac>)
 800112e:	2200      	movs	r2, #0
 8001130:	731a      	strb	r2, [r3, #12]
	Usart2.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <main+0x1ac>)
 8001134:	2200      	movs	r2, #0
 8001136:	735a      	strb	r2, [r3, #13]
	Usart2.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <main+0x1ac>)
 800113a:	2200      	movs	r2, #0
 800113c:	739a      	strb	r2, [r3, #14]
	
	TX_Pin.pGPIOx = GPIOA;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <main+0x1b4>)
 8001140:	4a3c      	ldr	r2, [pc, #240]	; (8001234 <main+0x1b8>)
 8001142:	601a      	str	r2, [r3, #0]
	TX_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <main+0x1b4>)
 8001146:	2202      	movs	r2, #2
 8001148:	715a      	strb	r2, [r3, #5]
	TX_Pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800114a:	4b39      	ldr	r3, [pc, #228]	; (8001230 <main+0x1b4>)
 800114c:	2202      	movs	r2, #2
 800114e:	719a      	strb	r2, [r3, #6]
	TX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(2);
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <main+0x1b4>)
 8001152:	2202      	movs	r2, #2
 8001154:	711a      	strb	r2, [r3, #4]
	TX_Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <main+0x1b4>)
 8001158:	2201      	movs	r2, #1
 800115a:	71da      	strb	r2, [r3, #7]
	TX_Pin.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_NUM(7);
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <main+0x1b4>)
 800115e:	2207      	movs	r2, #7
 8001160:	725a      	strb	r2, [r3, #9]

	RX_Pin.pGPIOx = GPIOA;
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <main+0x1bc>)
 8001164:	4a33      	ldr	r2, [pc, #204]	; (8001234 <main+0x1b8>)
 8001166:	601a      	str	r2, [r3, #0]
	RX_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8001168:	4b33      	ldr	r3, [pc, #204]	; (8001238 <main+0x1bc>)
 800116a:	2202      	movs	r2, #2
 800116c:	715a      	strb	r2, [r3, #5]
	RX_Pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <main+0x1bc>)
 8001170:	2200      	movs	r2, #0
 8001172:	721a      	strb	r2, [r3, #8]
	RX_Pin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <main+0x1bc>)
 8001176:	2202      	movs	r2, #2
 8001178:	719a      	strb	r2, [r3, #6]
	RX_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM(3);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <main+0x1bc>)
 800117c:	2203      	movs	r2, #3
 800117e:	711a      	strb	r2, [r3, #4]
	RX_Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <main+0x1bc>)
 8001182:	2201      	movs	r2, #1
 8001184:	71da      	strb	r2, [r3, #7]
	RX_Pin.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_ALT_NUM(7);
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <main+0x1bc>)
 8001188:	2207      	movs	r2, #7
 800118a:	725a      	strb	r2, [r3, #9]

	/*peripheral clock configuration*/
	GPIO_PeriClockControl(GPIOD, ENABLE);
 800118c:	2101      	movs	r1, #1
 800118e:	4822      	ldr	r0, [pc, #136]	; (8001218 <main+0x19c>)
 8001190:	f7ff fa72 	bl	8000678 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8001194:	2101      	movs	r1, #1
 8001196:	4827      	ldr	r0, [pc, #156]	; (8001234 <main+0x1b8>)
 8001198:	f7ff fa6e 	bl	8000678 <GPIO_PeriClockControl>
	USART_PeriClockControl(USART2, ENABLE);
 800119c:	2101      	movs	r1, #1
 800119e:	4823      	ldr	r0, [pc, #140]	; (800122c <main+0x1b0>)
 80011a0:	f7ff fd54 	bl	8000c4c <USART_PeriClockControl>

	/*GPIO initialization*/
	GPIO_Init(&Led);
 80011a4:	481b      	ldr	r0, [pc, #108]	; (8001214 <main+0x198>)
 80011a6:	f7ff fb0b 	bl	80007c0 <GPIO_Init>
	GPIO_Init(&Led2);
 80011aa:	481c      	ldr	r0, [pc, #112]	; (800121c <main+0x1a0>)
 80011ac:	f7ff fb08 	bl	80007c0 <GPIO_Init>
	GPIO_Init(&Led3);
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <main+0x1a4>)
 80011b2:	f7ff fb05 	bl	80007c0 <GPIO_Init>
	GPIO_Init(&Led4);
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <main+0x1a8>)
 80011b8:	f7ff fb02 	bl	80007c0 <GPIO_Init>
	GPIO_Init(&TX_Pin);
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <main+0x1b4>)
 80011be:	f7ff faff 	bl	80007c0 <GPIO_Init>
	GPIO_Init(&RX_Pin);
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <main+0x1bc>)
 80011c4:	f7ff fafc 	bl	80007c0 <GPIO_Init>

	/*UASRT2 initialization*/
	USART_Init(&Usart2);
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <main+0x1ac>)
 80011ca:	f7ff fd9b 	bl	8000d04 <USART_Init>
	USART_SetBaudRate(&Usart2);
 80011ce:	4816      	ldr	r0, [pc, #88]	; (8001228 <main+0x1ac>)
 80011d0:	f7ff fe4c 	bl	8000e6c <USART_SetBaudRate>
	Os_KernelAddPeriodicTask(NUMBER_PERIODIC_THREAD(2), ThreadTask4, 1000,ThreadTask5, 2000);
	Os_KernelInit(10);
	Os_KernelLaunch();
#else
	/* Dynamic allocation */
	Os_SemaphoreInit(&semaphore, 1);
 80011d4:	2101      	movs	r1, #1
 80011d6:	4819      	ldr	r0, [pc, #100]	; (800123c <main+0x1c0>)
 80011d8:	f7ff f954 	bl	8000484 <Os_SemaphoreInit>
	Os_KernelStackInit(ThreadTask, 100);
 80011dc:	2164      	movs	r1, #100	; 0x64
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <main+0x1c4>)
 80011e0:	f7ff f820 	bl	8000224 <Os_KernelStackInit>
	Os_KernelStackInit(ThreadTask2, 100);
 80011e4:	2164      	movs	r1, #100	; 0x64
 80011e6:	4817      	ldr	r0, [pc, #92]	; (8001244 <main+0x1c8>)
 80011e8:	f7ff f81c 	bl	8000224 <Os_KernelStackInit>
	Os_KernelStackInit(ThreadTask3, 100);
 80011ec:	2164      	movs	r1, #100	; 0x64
 80011ee:	4816      	ldr	r0, [pc, #88]	; (8001248 <main+0x1cc>)
 80011f0:	f7ff f818 	bl	8000224 <Os_KernelStackInit>
#if(HARDWARE_PERIODIC_THREAD_SUPPORT == STD_ON)
	Os_PeriodicTaskHardwareInit(1000, 5);
#endif
	Os_KernelAddPeriodicTask(NUMBER_PERIODIC_THREAD(2), ThreadTask4, 1000,ThreadTask5, 2000);
 80011f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <main+0x1d0>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001200:	4913      	ldr	r1, [pc, #76]	; (8001250 <main+0x1d4>)
 8001202:	2004      	movs	r0, #4
 8001204:	f7ff f9b4 	bl	8000570 <Os_KernelAddPeriodicTask>
	Os_KernelInit(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f7ff f8e1 	bl	80003d0 <Os_KernelInit>
	Os_KernelLaunch();
 800120e:	f7ff f8f5 	bl	80003fc <Os_KernelLaunch>
#endif

    while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x196>
 8001214:	200000b0 	.word	0x200000b0
 8001218:	40020c00 	.word	0x40020c00
 800121c:	200000bc 	.word	0x200000bc
 8001220:	200000c8 	.word	0x200000c8
 8001224:	200000d4 	.word	0x200000d4
 8001228:	200000f8 	.word	0x200000f8
 800122c:	40004400 	.word	0x40004400
 8001230:	200000e0 	.word	0x200000e0
 8001234:	40020000 	.word	0x40020000
 8001238:	200000ec 	.word	0x200000ec
 800123c:	2000011c 	.word	0x2000011c
 8001240:	08000fd9 	.word	0x08000fd9
 8001244:	08000ffd 	.word	0x08000ffd
 8001248:	08001021 	.word	0x08001021
 800124c:	08001061 	.word	0x08001061
 8001250:	08001045 	.word	0x08001045

08001254 <TIM2_IRQHandler>:

/****************************************************************/
/*  Exception handlers                                          */
/****************************************************************/

void TIM2_IRQHandler(){
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	TIM2->SR = 0;
 8001258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
#if(HARDWARE_PERIODIC_THREAD_SUPPORT == STD_ON)
	Os_CallbackPeriodicTask();
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129a:	f000 f81f 	bl	80012dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff feed 	bl	800107c <main>

080012a2 <LoopForever>:

LoopForever:
  b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   r0, =_estack
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80012b0:	080014e4 	.word	0x080014e4
  ldr r2, =_sbss
 80012b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012b8:	20000144 	.word	0x20000144

080012bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <calloc>:
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <calloc+0xc>)
 80012c2:	460a      	mov	r2, r1
 80012c4:	4601      	mov	r1, r0
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	f000 b834 	b.w	8001334 <_calloc_r>
 80012cc:	20000018 	.word	0x20000018

080012d0 <__errno>:
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <__errno+0x8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000018 	.word	0x20000018

080012dc <__libc_init_array>:
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	4d0d      	ldr	r5, [pc, #52]	; (8001314 <__libc_init_array+0x38>)
 80012e0:	4c0d      	ldr	r4, [pc, #52]	; (8001318 <__libc_init_array+0x3c>)
 80012e2:	1b64      	subs	r4, r4, r5
 80012e4:	10a4      	asrs	r4, r4, #2
 80012e6:	2600      	movs	r6, #0
 80012e8:	42a6      	cmp	r6, r4
 80012ea:	d109      	bne.n	8001300 <__libc_init_array+0x24>
 80012ec:	4d0b      	ldr	r5, [pc, #44]	; (800131c <__libc_init_array+0x40>)
 80012ee:	4c0c      	ldr	r4, [pc, #48]	; (8001320 <__libc_init_array+0x44>)
 80012f0:	f000 f8e8 	bl	80014c4 <_init>
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	10a4      	asrs	r4, r4, #2
 80012f8:	2600      	movs	r6, #0
 80012fa:	42a6      	cmp	r6, r4
 80012fc:	d105      	bne.n	800130a <__libc_init_array+0x2e>
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
 8001300:	f855 3b04 	ldr.w	r3, [r5], #4
 8001304:	4798      	blx	r3
 8001306:	3601      	adds	r6, #1
 8001308:	e7ee      	b.n	80012e8 <__libc_init_array+0xc>
 800130a:	f855 3b04 	ldr.w	r3, [r5], #4
 800130e:	4798      	blx	r3
 8001310:	3601      	adds	r6, #1
 8001312:	e7f2      	b.n	80012fa <__libc_init_array+0x1e>
 8001314:	080014dc 	.word	0x080014dc
 8001318:	080014dc 	.word	0x080014dc
 800131c:	080014dc 	.word	0x080014dc
 8001320:	080014e0 	.word	0x080014e0

08001324 <memset>:
 8001324:	4402      	add	r2, r0
 8001326:	4603      	mov	r3, r0
 8001328:	4293      	cmp	r3, r2
 800132a:	d100      	bne.n	800132e <memset+0xa>
 800132c:	4770      	bx	lr
 800132e:	f803 1b01 	strb.w	r1, [r3], #1
 8001332:	e7f9      	b.n	8001328 <memset+0x4>

08001334 <_calloc_r>:
 8001334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001336:	fba1 2402 	umull	r2, r4, r1, r2
 800133a:	b94c      	cbnz	r4, 8001350 <_calloc_r+0x1c>
 800133c:	4611      	mov	r1, r2
 800133e:	9201      	str	r2, [sp, #4]
 8001340:	f000 f82e 	bl	80013a0 <_malloc_r>
 8001344:	9a01      	ldr	r2, [sp, #4]
 8001346:	4605      	mov	r5, r0
 8001348:	b930      	cbnz	r0, 8001358 <_calloc_r+0x24>
 800134a:	4628      	mov	r0, r5
 800134c:	b003      	add	sp, #12
 800134e:	bd30      	pop	{r4, r5, pc}
 8001350:	220c      	movs	r2, #12
 8001352:	6002      	str	r2, [r0, #0]
 8001354:	2500      	movs	r5, #0
 8001356:	e7f8      	b.n	800134a <_calloc_r+0x16>
 8001358:	4621      	mov	r1, r4
 800135a:	f7ff ffe3 	bl	8001324 <memset>
 800135e:	e7f4      	b.n	800134a <_calloc_r+0x16>

08001360 <sbrk_aligned>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	4e0e      	ldr	r6, [pc, #56]	; (800139c <sbrk_aligned+0x3c>)
 8001364:	460c      	mov	r4, r1
 8001366:	6831      	ldr	r1, [r6, #0]
 8001368:	4605      	mov	r5, r0
 800136a:	b911      	cbnz	r1, 8001372 <sbrk_aligned+0x12>
 800136c:	f000 f88c 	bl	8001488 <_sbrk_r>
 8001370:	6030      	str	r0, [r6, #0]
 8001372:	4621      	mov	r1, r4
 8001374:	4628      	mov	r0, r5
 8001376:	f000 f887 	bl	8001488 <_sbrk_r>
 800137a:	1c43      	adds	r3, r0, #1
 800137c:	d00a      	beq.n	8001394 <sbrk_aligned+0x34>
 800137e:	1cc4      	adds	r4, r0, #3
 8001380:	f024 0403 	bic.w	r4, r4, #3
 8001384:	42a0      	cmp	r0, r4
 8001386:	d007      	beq.n	8001398 <sbrk_aligned+0x38>
 8001388:	1a21      	subs	r1, r4, r0
 800138a:	4628      	mov	r0, r5
 800138c:	f000 f87c 	bl	8001488 <_sbrk_r>
 8001390:	3001      	adds	r0, #1
 8001392:	d101      	bne.n	8001398 <sbrk_aligned+0x38>
 8001394:	f04f 34ff 	mov.w	r4, #4294967295
 8001398:	4620      	mov	r0, r4
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	20000138 	.word	0x20000138

080013a0 <_malloc_r>:
 80013a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a4:	1ccd      	adds	r5, r1, #3
 80013a6:	f025 0503 	bic.w	r5, r5, #3
 80013aa:	3508      	adds	r5, #8
 80013ac:	2d0c      	cmp	r5, #12
 80013ae:	bf38      	it	cc
 80013b0:	250c      	movcc	r5, #12
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	4607      	mov	r7, r0
 80013b6:	db01      	blt.n	80013bc <_malloc_r+0x1c>
 80013b8:	42a9      	cmp	r1, r5
 80013ba:	d905      	bls.n	80013c8 <_malloc_r+0x28>
 80013bc:	230c      	movs	r3, #12
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	2600      	movs	r6, #0
 80013c2:	4630      	mov	r0, r6
 80013c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c8:	4e2e      	ldr	r6, [pc, #184]	; (8001484 <_malloc_r+0xe4>)
 80013ca:	f000 f86d 	bl	80014a8 <__malloc_lock>
 80013ce:	6833      	ldr	r3, [r6, #0]
 80013d0:	461c      	mov	r4, r3
 80013d2:	bb34      	cbnz	r4, 8001422 <_malloc_r+0x82>
 80013d4:	4629      	mov	r1, r5
 80013d6:	4638      	mov	r0, r7
 80013d8:	f7ff ffc2 	bl	8001360 <sbrk_aligned>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	4604      	mov	r4, r0
 80013e0:	d14d      	bne.n	800147e <_malloc_r+0xde>
 80013e2:	6834      	ldr	r4, [r6, #0]
 80013e4:	4626      	mov	r6, r4
 80013e6:	2e00      	cmp	r6, #0
 80013e8:	d140      	bne.n	800146c <_malloc_r+0xcc>
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	4631      	mov	r1, r6
 80013ee:	4638      	mov	r0, r7
 80013f0:	eb04 0803 	add.w	r8, r4, r3
 80013f4:	f000 f848 	bl	8001488 <_sbrk_r>
 80013f8:	4580      	cmp	r8, r0
 80013fa:	d13a      	bne.n	8001472 <_malloc_r+0xd2>
 80013fc:	6821      	ldr	r1, [r4, #0]
 80013fe:	3503      	adds	r5, #3
 8001400:	1a6d      	subs	r5, r5, r1
 8001402:	f025 0503 	bic.w	r5, r5, #3
 8001406:	3508      	adds	r5, #8
 8001408:	2d0c      	cmp	r5, #12
 800140a:	bf38      	it	cc
 800140c:	250c      	movcc	r5, #12
 800140e:	4629      	mov	r1, r5
 8001410:	4638      	mov	r0, r7
 8001412:	f7ff ffa5 	bl	8001360 <sbrk_aligned>
 8001416:	3001      	adds	r0, #1
 8001418:	d02b      	beq.n	8001472 <_malloc_r+0xd2>
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	442b      	add	r3, r5
 800141e:	6023      	str	r3, [r4, #0]
 8001420:	e00e      	b.n	8001440 <_malloc_r+0xa0>
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	1b52      	subs	r2, r2, r5
 8001426:	d41e      	bmi.n	8001466 <_malloc_r+0xc6>
 8001428:	2a0b      	cmp	r2, #11
 800142a:	d916      	bls.n	800145a <_malloc_r+0xba>
 800142c:	1961      	adds	r1, r4, r5
 800142e:	42a3      	cmp	r3, r4
 8001430:	6025      	str	r5, [r4, #0]
 8001432:	bf18      	it	ne
 8001434:	6059      	strne	r1, [r3, #4]
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	bf08      	it	eq
 800143a:	6031      	streq	r1, [r6, #0]
 800143c:	5162      	str	r2, [r4, r5]
 800143e:	604b      	str	r3, [r1, #4]
 8001440:	4638      	mov	r0, r7
 8001442:	f104 060b 	add.w	r6, r4, #11
 8001446:	f000 f835 	bl	80014b4 <__malloc_unlock>
 800144a:	f026 0607 	bic.w	r6, r6, #7
 800144e:	1d23      	adds	r3, r4, #4
 8001450:	1af2      	subs	r2, r6, r3
 8001452:	d0b6      	beq.n	80013c2 <_malloc_r+0x22>
 8001454:	1b9b      	subs	r3, r3, r6
 8001456:	50a3      	str	r3, [r4, r2]
 8001458:	e7b3      	b.n	80013c2 <_malloc_r+0x22>
 800145a:	6862      	ldr	r2, [r4, #4]
 800145c:	42a3      	cmp	r3, r4
 800145e:	bf0c      	ite	eq
 8001460:	6032      	streq	r2, [r6, #0]
 8001462:	605a      	strne	r2, [r3, #4]
 8001464:	e7ec      	b.n	8001440 <_malloc_r+0xa0>
 8001466:	4623      	mov	r3, r4
 8001468:	6864      	ldr	r4, [r4, #4]
 800146a:	e7b2      	b.n	80013d2 <_malloc_r+0x32>
 800146c:	4634      	mov	r4, r6
 800146e:	6876      	ldr	r6, [r6, #4]
 8001470:	e7b9      	b.n	80013e6 <_malloc_r+0x46>
 8001472:	230c      	movs	r3, #12
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4638      	mov	r0, r7
 8001478:	f000 f81c 	bl	80014b4 <__malloc_unlock>
 800147c:	e7a1      	b.n	80013c2 <_malloc_r+0x22>
 800147e:	6025      	str	r5, [r4, #0]
 8001480:	e7de      	b.n	8001440 <_malloc_r+0xa0>
 8001482:	bf00      	nop
 8001484:	20000134 	.word	0x20000134

08001488 <_sbrk_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d06      	ldr	r5, [pc, #24]	; (80014a4 <_sbrk_r+0x1c>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	f7ff fd6a 	bl	8000f6c <_sbrk>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	d102      	bne.n	80014a2 <_sbrk_r+0x1a>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	b103      	cbz	r3, 80014a2 <_sbrk_r+0x1a>
 80014a0:	6023      	str	r3, [r4, #0]
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	2000013c 	.word	0x2000013c

080014a8 <__malloc_lock>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__malloc_lock+0x8>)
 80014aa:	f000 b809 	b.w	80014c0 <__retarget_lock_acquire_recursive>
 80014ae:	bf00      	nop
 80014b0:	20000140 	.word	0x20000140

080014b4 <__malloc_unlock>:
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <__malloc_unlock+0x8>)
 80014b6:	f000 b804 	b.w	80014c2 <__retarget_lock_release_recursive>
 80014ba:	bf00      	nop
 80014bc:	20000140 	.word	0x20000140

080014c0 <__retarget_lock_acquire_recursive>:
 80014c0:	4770      	bx	lr

080014c2 <__retarget_lock_release_recursive>:
 80014c2:	4770      	bx	lr

080014c4 <_init>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	bf00      	nop
 80014c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ca:	bc08      	pop	{r3}
 80014cc:	469e      	mov	lr, r3
 80014ce:	4770      	bx	lr

080014d0 <_fini>:
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	bf00      	nop
 80014d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d6:	bc08      	pop	{r3}
 80014d8:	469e      	mov	lr, r3
 80014da:	4770      	bx	lr
